/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.sml.sml.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.sml.sml.Indicator;
import org.xtext.example.sml.sml.Scope;
import org.xtext.example.sml.sml.SmlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Indicator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.sml.sml.impl.IndicatorImpl#getSp <em>Sp</em>}</li>
 *   <li>{@link org.xtext.example.sml.sml.impl.IndicatorImpl#getOc <em>Oc</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IndicatorImpl extends MinimalEObjectImpl.Container implements Indicator
{
  /**
   * The cached value of the '{@link #getSp() <em>Sp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSp()
   * @generated
   * @ordered
   */
  protected Scope sp;

  /**
   * The cached value of the '{@link #getOc() <em>Oc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOc()
   * @generated
   * @ordered
   */
  protected EObject oc;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndicatorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmlPackage.Literals.INDICATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scope getSp()
  {
    return sp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSp(Scope newSp, NotificationChain msgs)
  {
    Scope oldSp = sp;
    sp = newSp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmlPackage.INDICATOR__SP, oldSp, newSp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSp(Scope newSp)
  {
    if (newSp != sp)
    {
      NotificationChain msgs = null;
      if (sp != null)
        msgs = ((InternalEObject)sp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmlPackage.INDICATOR__SP, null, msgs);
      if (newSp != null)
        msgs = ((InternalEObject)newSp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmlPackage.INDICATOR__SP, null, msgs);
      msgs = basicSetSp(newSp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmlPackage.INDICATOR__SP, newSp, newSp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getOc()
  {
    return oc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOc(EObject newOc, NotificationChain msgs)
  {
    EObject oldOc = oc;
    oc = newOc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmlPackage.INDICATOR__OC, oldOc, newOc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOc(EObject newOc)
  {
    if (newOc != oc)
    {
      NotificationChain msgs = null;
      if (oc != null)
        msgs = ((InternalEObject)oc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmlPackage.INDICATOR__OC, null, msgs);
      if (newOc != null)
        msgs = ((InternalEObject)newOc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmlPackage.INDICATOR__OC, null, msgs);
      msgs = basicSetOc(newOc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmlPackage.INDICATOR__OC, newOc, newOc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmlPackage.INDICATOR__SP:
        return basicSetSp(null, msgs);
      case SmlPackage.INDICATOR__OC:
        return basicSetOc(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmlPackage.INDICATOR__SP:
        return getSp();
      case SmlPackage.INDICATOR__OC:
        return getOc();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmlPackage.INDICATOR__SP:
        setSp((Scope)newValue);
        return;
      case SmlPackage.INDICATOR__OC:
        setOc((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmlPackage.INDICATOR__SP:
        setSp((Scope)null);
        return;
      case SmlPackage.INDICATOR__OC:
        setOc((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmlPackage.INDICATOR__SP:
        return sp != null;
      case SmlPackage.INDICATOR__OC:
        return oc != null;
    }
    return super.eIsSet(featureID);
  }

} //IndicatorImpl
