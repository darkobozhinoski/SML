/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.sml.sml.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.sml.sml.Aggregate;
import org.xtext.example.sml.sml.Arena;
import org.xtext.example.sml.sml.AtomicIndicator;
import org.xtext.example.sml.sml.CompoundIndicator;
import org.xtext.example.sml.sml.Condition;
import org.xtext.example.sml.sml.ConstantSize;
import org.xtext.example.sml.sml.Coordinate2D;
import org.xtext.example.sml.sml.Coordinate3D;
import org.xtext.example.sml.sml.DefinitionOne;
import org.xtext.example.sml.sml.DefinitionThree;
import org.xtext.example.sml.sml.DefinitionTwo;
import org.xtext.example.sml.sml.Dimension;
import org.xtext.example.sml.sml.Dimension1;
import org.xtext.example.sml.sml.Dimension2;
import org.xtext.example.sml.sml.Dimension3;
import org.xtext.example.sml.sml.Element;
import org.xtext.example.sml.sml.ElementDescription;
import org.xtext.example.sml.sml.Environment;
import org.xtext.example.sml.sml.EnvironmentElement;
import org.xtext.example.sml.sml.EnvironmentElements;
import org.xtext.example.sml.sml.Foraging;
import org.xtext.example.sml.sml.Indicator;
import org.xtext.example.sml.sml.Interval;
import org.xtext.example.sml.sml.Light;
import org.xtext.example.sml.sml.Lowerbound;
import org.xtext.example.sml.sml.LowerorEqualbound;
import org.xtext.example.sml.sml.Migration;
import org.xtext.example.sml.sml.Mission;
import org.xtext.example.sml.sml.MissionObjective;
import org.xtext.example.sml.sml.MissionSpecification;
import org.xtext.example.sml.sml.MissionTime;
import org.xtext.example.sml.sml.Model;
import org.xtext.example.sml.sml.Obstacle;
import org.xtext.example.sml.sml.Occurence;
import org.xtext.example.sml.sml.Patch;
import org.xtext.example.sml.sml.Penalty;
import org.xtext.example.sml.sml.Position;
import org.xtext.example.sml.sml.ProbabilisticDecription;
import org.xtext.example.sml.sml.Range;
import org.xtext.example.sml.sml.Region;
import org.xtext.example.sml.sml.RegionDefinition;
import org.xtext.example.sml.sml.Reward;
import org.xtext.example.sml.sml.Scope;
import org.xtext.example.sml.sml.SmlFactory;
import org.xtext.example.sml.sml.SmlPackage;
import org.xtext.example.sml.sml.Swarmconf;
import org.xtext.example.sml.sml.Task;
import org.xtext.example.sml.sml.Time;
import org.xtext.example.sml.sml.Upperbound;
import org.xtext.example.sml.sml.UpperorEqualbound;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SmlFactoryImpl extends EFactoryImpl implements SmlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SmlFactory init()
  {
    try
    {
      SmlFactory theSmlFactory = (SmlFactory)EPackage.Registry.INSTANCE.getEFactory(SmlPackage.eNS_URI);
      if (theSmlFactory != null)
      {
        return theSmlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SmlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SmlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SmlPackage.MODEL: return createModel();
      case SmlPackage.ENVIRONMENT: return createEnvironment();
      case SmlPackage.PROBABILISTIC_DECRIPTION: return createProbabilisticDecription();
      case SmlPackage.SWARMCONF: return createSwarmconf();
      case SmlPackage.MISSION_SPECIFICATION: return createMissionSpecification();
      case SmlPackage.MISSION_TIME: return createMissionTime();
      case SmlPackage.MISSION: return createMission();
      case SmlPackage.TASK: return createTask();
      case SmlPackage.AGGREGATE: return createAggregate();
      case SmlPackage.MIGRATION: return createMigration();
      case SmlPackage.FORAGING: return createForaging();
      case SmlPackage.MISSION_OBJECTIVE: return createMissionObjective();
      case SmlPackage.INDICATOR: return createIndicator();
      case SmlPackage.ATOMIC_INDICATOR: return createAtomicIndicator();
      case SmlPackage.COMPOUND_INDICATOR: return createCompoundIndicator();
      case SmlPackage.SCOPE: return createScope();
      case SmlPackage.OCCURENCE: return createOccurence();
      case SmlPackage.PENALTY: return createPenalty();
      case SmlPackage.REWARD: return createReward();
      case SmlPackage.CONDITION: return createCondition();
      case SmlPackage.TIME: return createTime();
      case SmlPackage.ENVIRONMENT_ELEMENTS: return createEnvironmentElements();
      case SmlPackage.ENVIRONMENT_ELEMENT: return createEnvironmentElement();
      case SmlPackage.ELEMENT_DESCRIPTION: return createElementDescription();
      case SmlPackage.ELEMENT: return createElement();
      case SmlPackage.OBJECT: return createObject();
      case SmlPackage.OBSTACLE: return createObstacle();
      case SmlPackage.PATCH: return createPatch();
      case SmlPackage.LIGHT: return createLight();
      case SmlPackage.POSITION: return createPosition();
      case SmlPackage.ARENA: return createArena();
      case SmlPackage.REGION: return createRegion();
      case SmlPackage.REGION_DEFINITION: return createRegionDefinition();
      case SmlPackage.DEFINITION_ONE: return createDefinitionOne();
      case SmlPackage.DEFINITION_TWO: return createDefinitionTwo();
      case SmlPackage.DEFINITION_THREE: return createDefinitionThree();
      case SmlPackage.DIMENSION: return createDimension();
      case SmlPackage.DIMENSION1: return createDimension1();
      case SmlPackage.DIMENSION2: return createDimension2();
      case SmlPackage.DIMENSION3: return createDimension3();
      case SmlPackage.COORDINATE2_D: return createCoordinate2D();
      case SmlPackage.COORDINATE3_D: return createCoordinate3D();
      case SmlPackage.RANGE: return createRange();
      case SmlPackage.CONSTANT_SIZE: return createConstantSize();
      case SmlPackage.LOWERBOUND: return createLowerbound();
      case SmlPackage.LOWEROR_EQUALBOUND: return createLowerorEqualbound();
      case SmlPackage.UPPERBOUND: return createUpperbound();
      case SmlPackage.UPPEROR_EQUALBOUND: return createUpperorEqualbound();
      case SmlPackage.INTERVAL: return createInterval();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Environment createEnvironment()
  {
    EnvironmentImpl environment = new EnvironmentImpl();
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProbabilisticDecription createProbabilisticDecription()
  {
    ProbabilisticDecriptionImpl probabilisticDecription = new ProbabilisticDecriptionImpl();
    return probabilisticDecription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Swarmconf createSwarmconf()
  {
    SwarmconfImpl swarmconf = new SwarmconfImpl();
    return swarmconf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MissionSpecification createMissionSpecification()
  {
    MissionSpecificationImpl missionSpecification = new MissionSpecificationImpl();
    return missionSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MissionTime createMissionTime()
  {
    MissionTimeImpl missionTime = new MissionTimeImpl();
    return missionTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mission createMission()
  {
    MissionImpl mission = new MissionImpl();
    return mission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task createTask()
  {
    TaskImpl task = new TaskImpl();
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Aggregate createAggregate()
  {
    AggregateImpl aggregate = new AggregateImpl();
    return aggregate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Migration createMigration()
  {
    MigrationImpl migration = new MigrationImpl();
    return migration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Foraging createForaging()
  {
    ForagingImpl foraging = new ForagingImpl();
    return foraging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MissionObjective createMissionObjective()
  {
    MissionObjectiveImpl missionObjective = new MissionObjectiveImpl();
    return missionObjective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Indicator createIndicator()
  {
    IndicatorImpl indicator = new IndicatorImpl();
    return indicator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AtomicIndicator createAtomicIndicator()
  {
    AtomicIndicatorImpl atomicIndicator = new AtomicIndicatorImpl();
    return atomicIndicator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompoundIndicator createCompoundIndicator()
  {
    CompoundIndicatorImpl compoundIndicator = new CompoundIndicatorImpl();
    return compoundIndicator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scope createScope()
  {
    ScopeImpl scope = new ScopeImpl();
    return scope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Occurence createOccurence()
  {
    OccurenceImpl occurence = new OccurenceImpl();
    return occurence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Penalty createPenalty()
  {
    PenaltyImpl penalty = new PenaltyImpl();
    return penalty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reward createReward()
  {
    RewardImpl reward = new RewardImpl();
    return reward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Time createTime()
  {
    TimeImpl time = new TimeImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvironmentElements createEnvironmentElements()
  {
    EnvironmentElementsImpl environmentElements = new EnvironmentElementsImpl();
    return environmentElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvironmentElement createEnvironmentElement()
  {
    EnvironmentElementImpl environmentElement = new EnvironmentElementImpl();
    return environmentElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementDescription createElementDescription()
  {
    ElementDescriptionImpl elementDescription = new ElementDescriptionImpl();
    return elementDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.sml.sml.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Obstacle createObstacle()
  {
    ObstacleImpl obstacle = new ObstacleImpl();
    return obstacle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Patch createPatch()
  {
    PatchImpl patch = new PatchImpl();
    return patch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Light createLight()
  {
    LightImpl light = new LightImpl();
    return light;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Position createPosition()
  {
    PositionImpl position = new PositionImpl();
    return position;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arena createArena()
  {
    ArenaImpl arena = new ArenaImpl();
    return arena;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Region createRegion()
  {
    RegionImpl region = new RegionImpl();
    return region;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegionDefinition createRegionDefinition()
  {
    RegionDefinitionImpl regionDefinition = new RegionDefinitionImpl();
    return regionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefinitionOne createDefinitionOne()
  {
    DefinitionOneImpl definitionOne = new DefinitionOneImpl();
    return definitionOne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefinitionTwo createDefinitionTwo()
  {
    DefinitionTwoImpl definitionTwo = new DefinitionTwoImpl();
    return definitionTwo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefinitionThree createDefinitionThree()
  {
    DefinitionThreeImpl definitionThree = new DefinitionThreeImpl();
    return definitionThree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dimension createDimension()
  {
    DimensionImpl dimension = new DimensionImpl();
    return dimension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dimension1 createDimension1()
  {
    Dimension1Impl dimension1 = new Dimension1Impl();
    return dimension1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dimension2 createDimension2()
  {
    Dimension2Impl dimension2 = new Dimension2Impl();
    return dimension2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dimension3 createDimension3()
  {
    Dimension3Impl dimension3 = new Dimension3Impl();
    return dimension3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Coordinate2D createCoordinate2D()
  {
    Coordinate2DImpl coordinate2D = new Coordinate2DImpl();
    return coordinate2D;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Coordinate3D createCoordinate3D()
  {
    Coordinate3DImpl coordinate3D = new Coordinate3DImpl();
    return coordinate3D;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantSize createConstantSize()
  {
    ConstantSizeImpl constantSize = new ConstantSizeImpl();
    return constantSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lowerbound createLowerbound()
  {
    LowerboundImpl lowerbound = new LowerboundImpl();
    return lowerbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LowerorEqualbound createLowerorEqualbound()
  {
    LowerorEqualboundImpl lowerorEqualbound = new LowerorEqualboundImpl();
    return lowerorEqualbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Upperbound createUpperbound()
  {
    UpperboundImpl upperbound = new UpperboundImpl();
    return upperbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpperorEqualbound createUpperorEqualbound()
  {
    UpperorEqualboundImpl upperorEqualbound = new UpperorEqualboundImpl();
    return upperorEqualbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interval createInterval()
  {
    IntervalImpl interval = new IntervalImpl();
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SmlPackage getSmlPackage()
  {
    return (SmlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SmlPackage getPackage()
  {
    return SmlPackage.eINSTANCE;
  }

} //SmlFactoryImpl
