/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.sml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArenasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArenasArenaParserRuleCall_0_0 = (RuleCall)cArenasAssignment_0.eContents().get(0);
		private final Assignment cEnvAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvEnvironmentParserRuleCall_1_0 = (RuleCall)cEnvAssignment_1.eContents().get(0);
		private final Assignment cSwAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwSwarmconfParserRuleCall_2_0 = (RuleCall)cSwAssignment_2.eContents().get(0);
		private final Assignment cMsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsMissionSpecificationParserRuleCall_3_0 = (RuleCall)cMsAssignment_3.eContents().get(0);
		
		//Model:
		//	arenas=Arena env=Environment sw=Swarmconf* ms=MissionSpecification*;
		@Override public ParserRule getRule() { return rule; }
		
		//arenas=Arena env=Environment sw=Swarmconf* ms=MissionSpecification*
		public Group getGroup() { return cGroup; }
		
		//arenas=Arena
		public Assignment getArenasAssignment_0() { return cArenasAssignment_0; }
		
		//Arena
		public RuleCall getArenasArenaParserRuleCall_0_0() { return cArenasArenaParserRuleCall_0_0; }
		
		//env=Environment
		public Assignment getEnvAssignment_1() { return cEnvAssignment_1; }
		
		//Environment
		public RuleCall getEnvEnvironmentParserRuleCall_1_0() { return cEnvEnvironmentParserRuleCall_1_0; }
		
		//sw=Swarmconf*
		public Assignment getSwAssignment_2() { return cSwAssignment_2; }
		
		//Swarmconf
		public RuleCall getSwSwarmconfParserRuleCall_2_0() { return cSwSwarmconfParserRuleCall_2_0; }
		
		//ms=MissionSpecification*
		public Assignment getMsAssignment_3() { return cMsAssignment_3; }
		
		//MissionSpecification
		public RuleCall getMsMissionSpecificationParserRuleCall_3_0() { return cMsMissionSpecificationParserRuleCall_3_0; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cArenaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cContainsKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cTheKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cFollowingKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cElementsKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cColonKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cEnvironmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvironmentEnvironmentElementsParserRuleCall_1_0 = (RuleCall)cEnvironmentAssignment_1.eContents().get(0);
		
		//Environment:
		//	('The' 'arena' 'contains' 'the' 'following' 'elements' ':')? environment+=EnvironmentElements*;
		@Override public ParserRule getRule() { return rule; }
		
		//('The' 'arena' 'contains' 'the' 'following' 'elements' ':')? environment+=EnvironmentElements*
		public Group getGroup() { return cGroup; }
		
		//('The' 'arena' 'contains' 'the' 'following' 'elements' ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'The'
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }
		
		//'arena'
		public Keyword getArenaKeyword_0_1() { return cArenaKeyword_0_1; }
		
		//'contains'
		public Keyword getContainsKeyword_0_2() { return cContainsKeyword_0_2; }
		
		//'the'
		public Keyword getTheKeyword_0_3() { return cTheKeyword_0_3; }
		
		//'following'
		public Keyword getFollowingKeyword_0_4() { return cFollowingKeyword_0_4; }
		
		//'elements'
		public Keyword getElementsKeyword_0_5() { return cElementsKeyword_0_5; }
		
		//':'
		public Keyword getColonKeyword_0_6() { return cColonKeyword_0_6; }
		
		//environment+=EnvironmentElements*
		public Assignment getEnvironmentAssignment_1() { return cEnvironmentAssignment_1; }
		
		//EnvironmentElements
		public RuleCall getEnvironmentEnvironmentElementsParserRuleCall_1_0() { return cEnvironmentEnvironmentElementsParserRuleCall_1_0; }
	}
	public class ProbabilisticDecriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.ProbabilisticDecription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDistributedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDisAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisDistributionParserRuleCall_3_0 = (RuleCall)cDisAssignment_3.eContents().get(0);
		private final Keyword cDistributionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cKAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cKRegionCrossReference_6_0 = (CrossReference)cKAssignment_6.eContents().get(0);
		private final RuleCall cKRegionIDTerminalRuleCall_6_0_1 = (RuleCall)cKRegionCrossReference_6_0.eContents().get(1);
		
		//ProbabilisticDecription:
		//	'distributed' 'with' 'a' dis=Distribution 'distribution' 'in' k=[Region];
		@Override public ParserRule getRule() { return rule; }
		
		//'distributed' 'with' 'a' dis=Distribution 'distribution' 'in' k=[Region]
		public Group getGroup() { return cGroup; }
		
		//'distributed'
		public Keyword getDistributedKeyword_0() { return cDistributedKeyword_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'a'
		public Keyword getAKeyword_2() { return cAKeyword_2; }
		
		//dis=Distribution
		public Assignment getDisAssignment_3() { return cDisAssignment_3; }
		
		//Distribution
		public RuleCall getDisDistributionParserRuleCall_3_0() { return cDisDistributionParserRuleCall_3_0; }
		
		//'distribution'
		public Keyword getDistributionKeyword_4() { return cDistributionKeyword_4; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//k=[Region]
		public Assignment getKAssignment_6() { return cKAssignment_6; }
		
		//[Region]
		public CrossReference getKRegionCrossReference_6_0() { return cKRegionCrossReference_6_0; }
		
		//ID
		public RuleCall getKRegionIDTerminalRuleCall_6_0_1() { return cKRegionIDTerminalRuleCall_6_0_1; }
	}
	public class SwarmconfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Swarmconf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSwarmKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cConsistsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXRangeParserRuleCall_5_0 = (RuleCall)cXAssignment_5.eContents().get(0);
		private final Assignment cRAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRRobotParserRuleCall_6_0 = (RuleCall)cRAssignment_6.eContents().get(0);
		private final Assignment cPrAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPrProbabilisticDecriptionParserRuleCall_7_0 = (RuleCall)cPrAssignment_7.eContents().get(0);
		
		//Swarmconf:
		//	'The' 'robot' 'swarm' 'consists' 'of' x=Range r=Robot pr=ProbabilisticDecription
		//	//('distributed' 'in' dis=Distribution 'way' 'in' k=Region )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'The' 'robot' 'swarm' 'consists' 'of' x=Range r=Robot pr=ProbabilisticDecription
		public Group getGroup() { return cGroup; }
		
		//'The'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'robot'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//'swarm'
		public Keyword getSwarmKeyword_2() { return cSwarmKeyword_2; }
		
		//'consists'
		public Keyword getConsistsKeyword_3() { return cConsistsKeyword_3; }
		
		//'of'
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }
		
		//x=Range
		public Assignment getXAssignment_5() { return cXAssignment_5; }
		
		//Range
		public RuleCall getXRangeParserRuleCall_5_0() { return cXRangeParserRuleCall_5_0; }
		
		//r=Robot
		public Assignment getRAssignment_6() { return cRAssignment_6; }
		
		//Robot
		public RuleCall getRRobotParserRuleCall_6_0() { return cRRobotParserRuleCall_6_0; }
		
		//pr=ProbabilisticDecription
		public Assignment getPrAssignment_7() { return cPrAssignment_7; }
		
		//ProbabilisticDecription
		public RuleCall getPrProbabilisticDecriptionParserRuleCall_7_0() { return cPrProbabilisticDecriptionParserRuleCall_7_0; }
	}
	public class MissionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.MissionSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMMissionParserRuleCall_0_0 = (RuleCall)cMAssignment_0.eContents().get(0);
		private final Assignment cMtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMtMissionTimeParserRuleCall_1_0 = (RuleCall)cMtAssignment_1.eContents().get(0);
		private final Assignment cObAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObMissionObjectiveParserRuleCall_2_0 = (RuleCall)cObAssignment_2.eContents().get(0);
		
		//MissionSpecification:
		//	m=Mission mt=MissionTime ob=MissionObjective;
		@Override public ParserRule getRule() { return rule; }
		
		//m=Mission mt=MissionTime ob=MissionObjective
		public Group getGroup() { return cGroup; }
		
		//m=Mission
		public Assignment getMAssignment_0() { return cMAssignment_0; }
		
		//Mission
		public RuleCall getMMissionParserRuleCall_0_0() { return cMMissionParserRuleCall_0_0; }
		
		//mt=MissionTime
		public Assignment getMtAssignment_1() { return cMtAssignment_1; }
		
		//MissionTime
		public RuleCall getMtMissionTimeParserRuleCall_1_0() { return cMtMissionTimeParserRuleCall_1_0; }
		
		//ob=MissionObjective
		public Assignment getObAssignment_2() { return cObAssignment_2; }
		
		//MissionObjective
		public RuleCall getObMissionObjectiveParserRuleCall_2_0() { return cObMissionObjectiveParserRuleCall_2_0; }
	}
	public class MissionTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.MissionTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTotalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTimeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cMissionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cIsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTRangeParserRuleCall_7_0 = (RuleCall)cTAssignment_7.eContents().get(0);
		private final Assignment cMAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMMetricParserRuleCall_8_0 = (RuleCall)cMAssignment_8.eContents().get(0);
		
		//MissionTime:
		//	'The' 'total' 'time' 'of' 'the' 'mission' 'is' t=Range m=Metric;
		@Override public ParserRule getRule() { return rule; }
		
		//'The' 'total' 'time' 'of' 'the' 'mission' 'is' t=Range m=Metric
		public Group getGroup() { return cGroup; }
		
		//'The'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'total'
		public Keyword getTotalKeyword_1() { return cTotalKeyword_1; }
		
		//'time'
		public Keyword getTimeKeyword_2() { return cTimeKeyword_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//'the'
		public Keyword getTheKeyword_4() { return cTheKeyword_4; }
		
		//'mission'
		public Keyword getMissionKeyword_5() { return cMissionKeyword_5; }
		
		//'is'
		public Keyword getIsKeyword_6() { return cIsKeyword_6; }
		
		//t=Range
		public Assignment getTAssignment_7() { return cTAssignment_7; }
		
		//Range
		public RuleCall getTRangeParserRuleCall_7_0() { return cTRangeParserRuleCall_7_0; }
		
		//m=Metric
		public Assignment getMAssignment_8() { return cMAssignment_8; }
		
		//Metric
		public RuleCall getMMetricParserRuleCall_8_0() { return cMMetricParserRuleCall_8_0; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMissionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRobotsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTTaskParserRuleCall_7_0 = (RuleCall)cTAssignment_7.eContents().get(0);
		
		//Mission:
		//	'The' 'mission' 'of' 'the' 'robots' 'is' 'to' t=Task;
		@Override public ParserRule getRule() { return rule; }
		
		//'The' 'mission' 'of' 'the' 'robots' 'is' 'to' t=Task
		public Group getGroup() { return cGroup; }
		
		//'The'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'mission'
		public Keyword getMissionKeyword_1() { return cMissionKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//'the'
		public Keyword getTheKeyword_3() { return cTheKeyword_3; }
		
		//'robots'
		public Keyword getRobotsKeyword_4() { return cRobotsKeyword_4; }
		
		//'is'
		public Keyword getIsKeyword_5() { return cIsKeyword_5; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//t=Task
		public Assignment getTAssignment_7() { return cTAssignment_7; }
		
		//Task
		public RuleCall getTTaskParserRuleCall_7_0() { return cTTaskParserRuleCall_7_0; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Task");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAggregateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMigrationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForagingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Task:
		//	Aggregate | Migration | Foraging;
		@Override public ParserRule getRule() { return rule; }
		
		//Aggregate | Migration | Foraging
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Aggregate
		public RuleCall getAggregateParserRuleCall_0() { return cAggregateParserRuleCall_0; }
		
		//Migration
		public RuleCall getMigrationParserRuleCall_1() { return cMigrationParserRuleCall_1; }
		
		//Foraging
		public RuleCall getForagingParserRuleCall_2() { return cForagingParserRuleCall_2; }
	}
	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Aggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAggregateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRRegionCrossReference_2_0 = (CrossReference)cRAssignment_2.eContents().get(0);
		private final RuleCall cRRegionIDTerminalRuleCall_2_0_1 = (RuleCall)cRRegionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRRegionCrossReference_3_1_0 = (CrossReference)cRAssignment_3_1.eContents().get(0);
		private final RuleCall cRRegionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRRegionCrossReference_3_1_0.eContents().get(1);
		
		//Aggregate:
		//	'aggregate' 'on' r+=[Region] (',' r+=[Region])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'aggregate' 'on' r+=[Region] (',' r+=[Region])*
		public Group getGroup() { return cGroup; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_0() { return cAggregateKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//r+=[Region]
		public Assignment getRAssignment_2() { return cRAssignment_2; }
		
		//[Region]
		public CrossReference getRRegionCrossReference_2_0() { return cRRegionCrossReference_2_0; }
		
		//ID
		public RuleCall getRRegionIDTerminalRuleCall_2_0_1() { return cRRegionIDTerminalRuleCall_2_0_1; }
		
		//(',' r+=[Region])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//r+=[Region]
		public Assignment getRAssignment_3_1() { return cRAssignment_3_1; }
		
		//[Region]
		public CrossReference getRRegionCrossReference_3_1_0() { return cRRegionCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRRegionIDTerminalRuleCall_3_1_0_1() { return cRRegionIDTerminalRuleCall_3_1_0_1; }
	}
	public class MigrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Migration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAggregateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRRegionCrossReference_2_0 = (CrossReference)cRAssignment_2.eContents().get(0);
		private final RuleCall cRRegionIDTerminalRuleCall_2_0_1 = (RuleCall)cRRegionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRRegionCrossReference_3_1_0 = (CrossReference)cRAssignment_3_1.eContents().get(0);
		private final RuleCall cRRegionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRRegionCrossReference_3_1_0.eContents().get(1);
		private final Keyword cWhileKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAvoidingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTRegionCrossReference_6_0 = (CrossReference)cTAssignment_6.eContents().get(0);
		private final RuleCall cTRegionIDTerminalRuleCall_6_0_1 = (RuleCall)cTRegionCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cTRegionCrossReference_7_1_0 = (CrossReference)cTAssignment_7_1.eContents().get(0);
		private final RuleCall cTRegionIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTRegionCrossReference_7_1_0.eContents().get(1);
		
		//Migration:
		//	'aggregate' 'on' r+=[Region] (',' r+=[Region])* 'while' 'avoiding' t+=[Region] (',' t+=[Region])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'aggregate' 'on' r+=[Region] (',' r+=[Region])* 'while' 'avoiding' t+=[Region] (',' t+=[Region])*
		public Group getGroup() { return cGroup; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_0() { return cAggregateKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//r+=[Region]
		public Assignment getRAssignment_2() { return cRAssignment_2; }
		
		//[Region]
		public CrossReference getRRegionCrossReference_2_0() { return cRRegionCrossReference_2_0; }
		
		//ID
		public RuleCall getRRegionIDTerminalRuleCall_2_0_1() { return cRRegionIDTerminalRuleCall_2_0_1; }
		
		//(',' r+=[Region])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//r+=[Region]
		public Assignment getRAssignment_3_1() { return cRAssignment_3_1; }
		
		//[Region]
		public CrossReference getRRegionCrossReference_3_1_0() { return cRRegionCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRRegionIDTerminalRuleCall_3_1_0_1() { return cRRegionIDTerminalRuleCall_3_1_0_1; }
		
		//'while'
		public Keyword getWhileKeyword_4() { return cWhileKeyword_4; }
		
		//'avoiding'
		public Keyword getAvoidingKeyword_5() { return cAvoidingKeyword_5; }
		
		//t+=[Region]
		public Assignment getTAssignment_6() { return cTAssignment_6; }
		
		//[Region]
		public CrossReference getTRegionCrossReference_6_0() { return cTRegionCrossReference_6_0; }
		
		//ID
		public RuleCall getTRegionIDTerminalRuleCall_6_0_1() { return cTRegionIDTerminalRuleCall_6_0_1; }
		
		//(',' t+=[Region])*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//t+=[Region]
		public Assignment getTAssignment_7_1() { return cTAssignment_7_1; }
		
		//[Region]
		public CrossReference getTRegionCrossReference_7_1_0() { return cTRegionCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTRegionIDTerminalRuleCall_7_1_0_1() { return cTRegionIDTerminalRuleCall_7_1_0_1; }
	}
	public class ForagingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Foraging");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFoodKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceRegionCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceRegionIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceRegionCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSourceRegionCrossReference_4_1_0 = (CrossReference)cSourceAssignment_4_1.eContents().get(0);
		private final RuleCall cSourceRegionIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSourceRegionCrossReference_4_1_0.eContents().get(1);
		private final Keyword cAndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cBringKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cItKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cBackKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cToKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cNestAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cNestRegionCrossReference_10_0 = (CrossReference)cNestAssignment_10.eContents().get(0);
		private final RuleCall cNestRegionIDTerminalRuleCall_10_0_1 = (RuleCall)cNestRegionCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cSourceAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cSourceRegionCrossReference_11_1_0 = (CrossReference)cSourceAssignment_11_1.eContents().get(0);
		private final RuleCall cSourceRegionIDTerminalRuleCall_11_1_0_1 = (RuleCall)cSourceRegionCrossReference_11_1_0.eContents().get(1);
		
		//Foraging:
		//	'collect' 'food' 'from' source+=[Region] (',' source+=[Region])* 'and' 'bring' 'it' 'back' 'to' nest=[Region] (','
		//	source+=[Region])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'collect' 'food' 'from' source+=[Region] (',' source+=[Region])* 'and' 'bring' 'it' 'back' 'to' nest=[Region] (','
		//source+=[Region])*
		public Group getGroup() { return cGroup; }
		
		//'collect'
		public Keyword getCollectKeyword_0() { return cCollectKeyword_0; }
		
		//'food'
		public Keyword getFoodKeyword_1() { return cFoodKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//source+=[Region]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[Region]
		public CrossReference getSourceRegionCrossReference_3_0() { return cSourceRegionCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceRegionIDTerminalRuleCall_3_0_1() { return cSourceRegionIDTerminalRuleCall_3_0_1; }
		
		//(',' source+=[Region])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//source+=[Region]
		public Assignment getSourceAssignment_4_1() { return cSourceAssignment_4_1; }
		
		//[Region]
		public CrossReference getSourceRegionCrossReference_4_1_0() { return cSourceRegionCrossReference_4_1_0; }
		
		//ID
		public RuleCall getSourceRegionIDTerminalRuleCall_4_1_0_1() { return cSourceRegionIDTerminalRuleCall_4_1_0_1; }
		
		//'and'
		public Keyword getAndKeyword_5() { return cAndKeyword_5; }
		
		//'bring'
		public Keyword getBringKeyword_6() { return cBringKeyword_6; }
		
		//'it'
		public Keyword getItKeyword_7() { return cItKeyword_7; }
		
		//'back'
		public Keyword getBackKeyword_8() { return cBackKeyword_8; }
		
		//'to'
		public Keyword getToKeyword_9() { return cToKeyword_9; }
		
		//nest=[Region]
		public Assignment getNestAssignment_10() { return cNestAssignment_10; }
		
		//[Region]
		public CrossReference getNestRegionCrossReference_10_0() { return cNestRegionCrossReference_10_0; }
		
		//ID
		public RuleCall getNestRegionIDTerminalRuleCall_10_0_1() { return cNestRegionIDTerminalRuleCall_10_0_1; }
		
		//(',' source+=[Region])*
		public Group getGroup_11() { return cGroup_11; }
		
		//','
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//source+=[Region]
		public Assignment getSourceAssignment_11_1() { return cSourceAssignment_11_1; }
		
		//[Region]
		public CrossReference getSourceRegionCrossReference_11_1_0() { return cSourceRegionCrossReference_11_1_0; }
		
		//ID
		public RuleCall getSourceRegionIDTerminalRuleCall_11_1_0_1() { return cSourceRegionIDTerminalRuleCall_11_1_0_1; }
	}
	public class MetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Metric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSecondsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStepsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Metric:
		//	'seconds' | 'steps' | 'm';
		@Override public ParserRule getRule() { return rule; }
		
		//'seconds' | 'steps' | 'm'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'seconds'
		public Keyword getSecondsKeyword_0() { return cSecondsKeyword_0; }
		
		//'steps'
		public Keyword getStepsKeyword_1() { return cStepsKeyword_1; }
		
		//'m'
		public Keyword getMKeyword_2() { return cMKeyword_2; }
	}
	public class MissionObjectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.MissionObjective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPerformanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMeasureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDefinedKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTermsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cOfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cAnKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cObjectiveKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cFunctionKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cToKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cBeKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cTypeAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final Alternatives cTypeAlternatives_13_0 = (Alternatives)cTypeAssignment_13.eContents().get(0);
		private final Keyword cTypeMaximizedKeyword_13_0_0 = (Keyword)cTypeAlternatives_13_0.eContents().get(0);
		private final Keyword cTypeMinimizedKeyword_13_0_1 = (Keyword)cTypeAlternatives_13_0.eContents().get(1);
		private final Keyword cTheKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cObjectiveKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cFunctionKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cIsKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cComputedKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cAsKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cFollowsKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cInAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cInIndicatorParserRuleCall_21_0 = (RuleCall)cInAssignment_21.eContents().get(0);
		
		//MissionObjective:
		//	'The' 'performance' 'measure' 'is' 'defined' 'in' 'terms' 'of' 'an' 'objective' 'function' 'to' 'be'
		//	Type=('maximized.' | 'minimized.')
		//	'The' 'objective' 'function' 'is' 'computed' 'as' 'follows:' in+=Indicator*
		//	//	'The' 'performance' 'measure' 'is' 'defined' 'in' 'terms' 'of' 'an' 'objective' 'function' 'that' 'maximizes' 'the' 'following' 'score' ':' 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'The' 'performance' 'measure' 'is' 'defined' 'in' 'terms' 'of' 'an' 'objective' 'function' 'to' 'be' Type=('maximized.'
		//| 'minimized.') 'The' 'objective' 'function' 'is' 'computed' 'as' 'follows:' in+=Indicator*
		public Group getGroup() { return cGroup; }
		
		//'The'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'performance'
		public Keyword getPerformanceKeyword_1() { return cPerformanceKeyword_1; }
		
		//'measure'
		public Keyword getMeasureKeyword_2() { return cMeasureKeyword_2; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//'defined'
		public Keyword getDefinedKeyword_4() { return cDefinedKeyword_4; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//'terms'
		public Keyword getTermsKeyword_6() { return cTermsKeyword_6; }
		
		//'of'
		public Keyword getOfKeyword_7() { return cOfKeyword_7; }
		
		//'an'
		public Keyword getAnKeyword_8() { return cAnKeyword_8; }
		
		//'objective'
		public Keyword getObjectiveKeyword_9() { return cObjectiveKeyword_9; }
		
		//'function'
		public Keyword getFunctionKeyword_10() { return cFunctionKeyword_10; }
		
		//'to'
		public Keyword getToKeyword_11() { return cToKeyword_11; }
		
		//'be'
		public Keyword getBeKeyword_12() { return cBeKeyword_12; }
		
		//Type=('maximized.' | 'minimized.')
		public Assignment getTypeAssignment_13() { return cTypeAssignment_13; }
		
		//('maximized.' | 'minimized.')
		public Alternatives getTypeAlternatives_13_0() { return cTypeAlternatives_13_0; }
		
		//'maximized.'
		public Keyword getTypeMaximizedKeyword_13_0_0() { return cTypeMaximizedKeyword_13_0_0; }
		
		//'minimized.'
		public Keyword getTypeMinimizedKeyword_13_0_1() { return cTypeMinimizedKeyword_13_0_1; }
		
		//'The'
		public Keyword getTheKeyword_14() { return cTheKeyword_14; }
		
		//'objective'
		public Keyword getObjectiveKeyword_15() { return cObjectiveKeyword_15; }
		
		//'function'
		public Keyword getFunctionKeyword_16() { return cFunctionKeyword_16; }
		
		//'is'
		public Keyword getIsKeyword_17() { return cIsKeyword_17; }
		
		//'computed'
		public Keyword getComputedKeyword_18() { return cComputedKeyword_18; }
		
		//'as'
		public Keyword getAsKeyword_19() { return cAsKeyword_19; }
		
		//'follows:'
		public Keyword getFollowsKeyword_20() { return cFollowsKeyword_20; }
		
		//in+=Indicator*
		public Assignment getInAssignment_21() { return cInAssignment_21; }
		
		//Indicator
		public RuleCall getInIndicatorParserRuleCall_21_0() { return cInIndicatorParserRuleCall_21_0; }
	}
	public class IndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Indicator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSpScopeParserRuleCall_0_0 = (RuleCall)cSpAssignment_0.eContents().get(0);
		private final Assignment cOcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOcAlternatives_1_0 = (Alternatives)cOcAssignment_1.eContents().get(0);
		private final RuleCall cOcAtomicIndicatorParserRuleCall_1_0_0 = (RuleCall)cOcAlternatives_1_0.eContents().get(0);
		private final RuleCall cOcCompoundIndicatorParserRuleCall_1_0_1 = (RuleCall)cOcAlternatives_1_0.eContents().get(1);
		
		//Indicator:
		//	sp=Scope oc=(AtomicIndicator | CompoundIndicator);
		@Override public ParserRule getRule() { return rule; }
		
		//sp=Scope oc=(AtomicIndicator | CompoundIndicator)
		public Group getGroup() { return cGroup; }
		
		//sp=Scope
		public Assignment getSpAssignment_0() { return cSpAssignment_0; }
		
		//Scope
		public RuleCall getSpScopeParserRuleCall_0_0() { return cSpScopeParserRuleCall_0_0; }
		
		//oc=(AtomicIndicator | CompoundIndicator)
		public Assignment getOcAssignment_1() { return cOcAssignment_1; }
		
		//(AtomicIndicator | CompoundIndicator)
		public Alternatives getOcAlternatives_1_0() { return cOcAlternatives_1_0; }
		
		//AtomicIndicator
		public RuleCall getOcAtomicIndicatorParserRuleCall_1_0_0() { return cOcAtomicIndicatorParserRuleCall_1_0_0; }
		
		//CompoundIndicator
		public RuleCall getOcCompoundIndicatorParserRuleCall_1_0_1() { return cOcCompoundIndicatorParserRuleCall_1_0_1; }
	}
	public class AtomicIndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.AtomicIndicator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOcOccurenceParserRuleCall_2_0 = (RuleCall)cOcAssignment_2.eContents().get(0);
		
		//AtomicIndicator:
		//	'each' 'robot' oc=Occurence;
		@Override public ParserRule getRule() { return rule; }
		
		//'each' 'robot' oc=Occurence
		public Group getGroup() { return cGroup; }
		
		//'each'
		public Keyword getEachKeyword_0() { return cEachKeyword_0; }
		
		//'robot'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//oc=Occurence
		public Assignment getOcAssignment_2() { return cOcAssignment_2; }
		
		//Occurence
		public RuleCall getOcOccurenceParserRuleCall_2_0() { return cOcOccurenceParserRuleCall_2_0; }
	}
	public class CompoundIndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.CompoundIndicator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSwarmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOcOccurenceParserRuleCall_2_0 = (RuleCall)cOcAssignment_2.eContents().get(0);
		
		//CompoundIndicator:
		//	'the' 'swarm' oc=Occurence;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' 'swarm' oc=Occurence
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'swarm'
		public Keyword getSwarmKeyword_1() { return cSwarmKeyword_1; }
		
		//oc=Occurence
		public Assignment getOcAssignment_2() { return cOcAssignment_2; }
		
		//Occurence
		public RuleCall getOcOccurenceParserRuleCall_2_0() { return cOcOccurenceParserRuleCall_2_0; }
	}
	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cSpAlternatives_0_0 = (Alternatives)cSpAssignment_0.eContents().get(0);
		private final Keyword cSpAtAnyPointInTimeKeyword_0_0_0 = (Keyword)cSpAlternatives_0_0.eContents().get(0);
		private final Keyword cSpAtTheEndOfTheMissionKeyword_0_0_1 = (Keyword)cSpAlternatives_0_0.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Scope:
		//	sp=("At any point in time," | "At the end of the mission,") | Condition
		//	//| 'Before' p=AtomicEvent| 'After' p=(AtomicEvent) | 'Between'   p=AtomicEvent 'and' q=AtomicEvent | 'After' p=AtomicEvent 'Untii' q=AtomicEvent | 'at' 'time' t=Time
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sp=("At any point in time," | "At the end of the mission,") | Condition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sp=("At any point in time," | "At the end of the mission,")
		public Assignment getSpAssignment_0() { return cSpAssignment_0; }
		
		//("At any point in time," | "At the end of the mission,")
		public Alternatives getSpAlternatives_0_0() { return cSpAlternatives_0_0; }
		
		//"At any point in time,"
		public Keyword getSpAtAnyPointInTimeKeyword_0_0_0() { return cSpAtAnyPointInTimeKeyword_0_0_0; }
		
		//"At the end of the mission,"
		public Keyword getSpAtTheEndOfTheMissionKeyword_0_0_1() { return cSpAtTheEndOfTheMissionKeyword_0_0_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_1() { return cConditionParserRuleCall_1; }
	}
	public class AtomicEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.AtomicEvent");
		private final Keyword cWallsChangeColorKeyword = (Keyword)rule.eContents().get(1);
		
		//AtomicEvent:
		//	'Walls change color';
		@Override public ParserRule getRule() { return rule; }
		
		//'Walls change color'
		public Keyword getWallsChangeColorKeyword() { return cWallsChangeColorKeyword; }
	}
	public class OccurenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Occurence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRewardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPenaltyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Occurence:
		//	Reward | Penalty;
		@Override public ParserRule getRule() { return rule; }
		
		//Reward | Penalty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Reward
		public RuleCall getRewardParserRuleCall_0() { return cRewardParserRuleCall_0; }
		
		//Penalty
		public RuleCall getPenaltyParserRuleCall_1() { return cPenaltyParserRuleCall_1; }
	}
	public class PenaltyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Penalty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPenaltyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKDoubleParserRuleCall_3_0 = (RuleCall)cKAssignment_3.eContents().get(0);
		private final Assignment cCAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCConditionParserRuleCall_4_0 = (RuleCall)cCAssignment_4.eContents().get(0);
		
		//Penalty:
		//	'gets' 'a' 'penalty' k=Double c=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//'gets' 'a' 'penalty' k=Double c=Condition
		public Group getGroup() { return cGroup; }
		
		//'gets'
		public Keyword getGetsKeyword_0() { return cGetsKeyword_0; }
		
		//'a'
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//'penalty'
		public Keyword getPenaltyKeyword_2() { return cPenaltyKeyword_2; }
		
		//k=Double
		public Assignment getKAssignment_3() { return cKAssignment_3; }
		
		//Double
		public RuleCall getKDoubleParserRuleCall_3_0() { return cKDoubleParserRuleCall_3_0; }
		
		//c=Condition
		public Assignment getCAssignment_4() { return cCAssignment_4; }
		
		//Condition
		public RuleCall getCConditionParserRuleCall_4_0() { return cCConditionParserRuleCall_4_0; }
	}
	public class RewardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Reward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRewardKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKDoubleParserRuleCall_3_0 = (RuleCall)cKAssignment_3.eContents().get(0);
		private final Assignment cCAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCConditionParserRuleCall_4_0 = (RuleCall)cCAssignment_4.eContents().get(0);
		
		//Reward:
		//	'gets' 'a' 'reward' k=Double c=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//'gets' 'a' 'reward' k=Double c=Condition
		public Group getGroup() { return cGroup; }
		
		//'gets'
		public Keyword getGetsKeyword_0() { return cGetsKeyword_0; }
		
		//'a'
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//'reward'
		public Keyword getRewardKeyword_2() { return cRewardKeyword_2; }
		
		//k=Double
		public Assignment getKAssignment_3() { return cKAssignment_3; }
		
		//Double
		public RuleCall getKDoubleParserRuleCall_3_0() { return cKDoubleParserRuleCall_3_0; }
		
		//c=Condition
		public Assignment getCAssignment_4() { return cCAssignment_4; }
		
		//Condition
		public RuleCall getCConditionParserRuleCall_4_0() { return cCConditionParserRuleCall_4_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cIfKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cIfKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cItKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cIsKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Keyword cOnKeyword_0_3_0 = (Keyword)cAlternatives_0_3.eContents().get(0);
		private final Keyword cOutsideKeyword_0_3_1 = (Keyword)cAlternatives_0_3.eContents().get(1);
		private final Assignment cRAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cRRegionCrossReference_0_4_0 = (CrossReference)cRAssignment_0_4.eContents().get(0);
		private final RuleCall cRRegionIDTerminalRuleCall_0_4_0_1 = (RuleCall)cRRegionCrossReference_0_4_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cIfKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cIfKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cThereKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cAreKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cMoreKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cThanKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cNAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cNINTTerminalRuleCall_1_5_0 = (RuleCall)cNAssignment_1_5.eContents().get(0);
		private final Keyword cRobotsKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Alternatives cAlternatives_1_7 = (Alternatives)cGroup_1.eContents().get(7);
		private final Keyword cOnKeyword_1_7_0 = (Keyword)cAlternatives_1_7.eContents().get(0);
		private final Keyword cOutsideKeyword_1_7_1 = (Keyword)cAlternatives_1_7.eContents().get(1);
		private final Assignment cRAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final CrossReference cRRegionCrossReference_1_8_0 = (CrossReference)cRAssignment_1_8.eContents().get(0);
		private final RuleCall cRRegionIDTerminalRuleCall_1_8_0_1 = (RuleCall)cRRegionCrossReference_1_8_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cIfKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cIfKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Keyword cItKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cGoesKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cFromKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cRAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cRRegionCrossReference_2_4_0 = (CrossReference)cRAssignment_2_4.eContents().get(0);
		private final RuleCall cRRegionIDTerminalRuleCall_2_4_0_1 = (RuleCall)cRRegionCrossReference_2_4_0.eContents().get(1);
		private final Keyword cIntoKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cNestAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final CrossReference cNestRegionCrossReference_2_6_0 = (CrossReference)cNestAssignment_2_6.eContents().get(0);
		private final RuleCall cNestRegionIDTerminalRuleCall_2_6_0_1 = (RuleCall)cNestRegionCrossReference_2_6_0.eContents().get(1);
		
		//Condition:
		//	('if' | 'If') 'it' 'is' ('on' | 'outside') r=[Region] | ('if' | 'If') 'there' 'are' 'more' 'than' n=INT 'robots'
		//	('on' | 'outside') r=[Region] ","* | ('if' | 'If') 'it' 'goes' 'from' r=[Region] 'into' nest=[Region];
		@Override public ParserRule getRule() { return rule; }
		
		//('if' | 'If') 'it' 'is' ('on' | 'outside') r=[Region] | ('if' | 'If') 'there' 'are' 'more' 'than' n=INT 'robots' ('on' |
		//'outside') r=[Region] ","* | ('if' | 'If') 'it' 'goes' 'from' r=[Region] 'into' nest=[Region]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('if' | 'If') 'it' 'is' ('on' | 'outside') r=[Region]
		public Group getGroup_0() { return cGroup_0; }
		
		//'if' | 'If'
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'if'
		public Keyword getIfKeyword_0_0_0() { return cIfKeyword_0_0_0; }
		
		//'If'
		public Keyword getIfKeyword_0_0_1() { return cIfKeyword_0_0_1; }
		
		//'it'
		public Keyword getItKeyword_0_1() { return cItKeyword_0_1; }
		
		//'is'
		public Keyword getIsKeyword_0_2() { return cIsKeyword_0_2; }
		
		//'on' | 'outside'
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }
		
		//'on'
		public Keyword getOnKeyword_0_3_0() { return cOnKeyword_0_3_0; }
		
		//'outside'
		public Keyword getOutsideKeyword_0_3_1() { return cOutsideKeyword_0_3_1; }
		
		//r=[Region]
		public Assignment getRAssignment_0_4() { return cRAssignment_0_4; }
		
		//[Region]
		public CrossReference getRRegionCrossReference_0_4_0() { return cRRegionCrossReference_0_4_0; }
		
		//ID
		public RuleCall getRRegionIDTerminalRuleCall_0_4_0_1() { return cRRegionIDTerminalRuleCall_0_4_0_1; }
		
		//('if' | 'If') 'there' 'are' 'more' 'than' n=INT 'robots' ('on' | 'outside') r=[Region] ","*
		public Group getGroup_1() { return cGroup_1; }
		
		//'if' | 'If'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'if'
		public Keyword getIfKeyword_1_0_0() { return cIfKeyword_1_0_0; }
		
		//'If'
		public Keyword getIfKeyword_1_0_1() { return cIfKeyword_1_0_1; }
		
		//'there'
		public Keyword getThereKeyword_1_1() { return cThereKeyword_1_1; }
		
		//'are'
		public Keyword getAreKeyword_1_2() { return cAreKeyword_1_2; }
		
		//'more'
		public Keyword getMoreKeyword_1_3() { return cMoreKeyword_1_3; }
		
		//'than'
		public Keyword getThanKeyword_1_4() { return cThanKeyword_1_4; }
		
		//n=INT
		public Assignment getNAssignment_1_5() { return cNAssignment_1_5; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_1_5_0() { return cNINTTerminalRuleCall_1_5_0; }
		
		//'robots'
		public Keyword getRobotsKeyword_1_6() { return cRobotsKeyword_1_6; }
		
		//'on' | 'outside'
		public Alternatives getAlternatives_1_7() { return cAlternatives_1_7; }
		
		//'on'
		public Keyword getOnKeyword_1_7_0() { return cOnKeyword_1_7_0; }
		
		//'outside'
		public Keyword getOutsideKeyword_1_7_1() { return cOutsideKeyword_1_7_1; }
		
		//r=[Region]
		public Assignment getRAssignment_1_8() { return cRAssignment_1_8; }
		
		//[Region]
		public CrossReference getRRegionCrossReference_1_8_0() { return cRRegionCrossReference_1_8_0; }
		
		//ID
		public RuleCall getRRegionIDTerminalRuleCall_1_8_0_1() { return cRRegionIDTerminalRuleCall_1_8_0_1; }
		
		//","*
		public Keyword getCommaKeyword_1_9() { return cCommaKeyword_1_9; }
		
		//('if' | 'If') 'it' 'goes' 'from' r=[Region] 'into' nest=[Region]
		public Group getGroup_2() { return cGroup_2; }
		
		//'if' | 'If'
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'if'
		public Keyword getIfKeyword_2_0_0() { return cIfKeyword_2_0_0; }
		
		//'If'
		public Keyword getIfKeyword_2_0_1() { return cIfKeyword_2_0_1; }
		
		//'it'
		public Keyword getItKeyword_2_1() { return cItKeyword_2_1; }
		
		//'goes'
		public Keyword getGoesKeyword_2_2() { return cGoesKeyword_2_2; }
		
		//'from'
		public Keyword getFromKeyword_2_3() { return cFromKeyword_2_3; }
		
		//r=[Region]
		public Assignment getRAssignment_2_4() { return cRAssignment_2_4; }
		
		//[Region]
		public CrossReference getRRegionCrossReference_2_4_0() { return cRRegionCrossReference_2_4_0; }
		
		//ID
		public RuleCall getRRegionIDTerminalRuleCall_2_4_0_1() { return cRRegionIDTerminalRuleCall_2_4_0_1; }
		
		//'into'
		public Keyword getIntoKeyword_2_5() { return cIntoKeyword_2_5; }
		
		//nest=[Region]
		public Assignment getNestAssignment_2_6() { return cNestAssignment_2_6; }
		
		//[Region]
		public CrossReference getNestRegionCrossReference_2_6_0() { return cNestRegionCrossReference_2_6_0; }
		
		//ID
		public RuleCall getNestRegionIDTerminalRuleCall_2_6_0_1() { return cNestRegionIDTerminalRuleCall_2_6_0_1; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Time");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cXRangeParserRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBegginingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cTheKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cMissionKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cEndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cOfKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cTheKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cMissionKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Time:
		//	x=Range | 'beggining' 'of' 'the' 'mission' | 'end' 'of' 'the' 'mission';
		@Override public ParserRule getRule() { return rule; }
		
		//x=Range | 'beggining' 'of' 'the' 'mission' | 'end' 'of' 'the' 'mission'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//x=Range
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//Range
		public RuleCall getXRangeParserRuleCall_0_0() { return cXRangeParserRuleCall_0_0; }
		
		//'beggining' 'of' 'the' 'mission'
		public Group getGroup_1() { return cGroup_1; }
		
		//'beggining'
		public Keyword getBegginingKeyword_1_0() { return cBegginingKeyword_1_0; }
		
		//'of'
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }
		
		//'the'
		public Keyword getTheKeyword_1_2() { return cTheKeyword_1_2; }
		
		//'mission'
		public Keyword getMissionKeyword_1_3() { return cMissionKeyword_1_3; }
		
		//'end' 'of' 'the' 'mission'
		public Group getGroup_2() { return cGroup_2; }
		
		//'end'
		public Keyword getEndKeyword_2_0() { return cEndKeyword_2_0; }
		
		//'of'
		public Keyword getOfKeyword_2_1() { return cOfKeyword_2_1; }
		
		//'the'
		public Keyword getTheKeyword_2_2() { return cTheKeyword_2_2; }
		
		//'mission'
		public Keyword getMissionKeyword_2_3() { return cMissionKeyword_2_3; }
	}
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Robot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEPuckKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFootBootKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Robot:
		//	'e-puck' | 'foot-boot';
		@Override public ParserRule getRule() { return rule; }
		
		//'e-puck' | 'foot-boot'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'e-puck'
		public Keyword getEPuckKeyword_0() { return cEPuckKeyword_0; }
		
		//'foot-boot'
		public Keyword getFootBootKeyword_1() { return cFootBootKeyword_1; }
	}
	public class DistributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Distribution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUniformKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGaussianKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cConstantKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Distribution:
		//	'Uniform' | 'Gaussian' | 'Constant';
		@Override public ParserRule getRule() { return rule; }
		
		//'Uniform' | 'Gaussian' | 'Constant'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Uniform'
		public Keyword getUniformKeyword_0() { return cUniformKeyword_0; }
		
		//'Gaussian'
		public Keyword getGaussianKeyword_1() { return cGaussianKeyword_1; }
		
		//'Constant'
		public Keyword getConstantKeyword_2() { return cConstantKeyword_2; }
	}
	public class EnvironmentElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.EnvironmentElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnvironmentElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementDescriptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnvironmentElements:
		//	EnvironmentElement | ElementDescription;
		@Override public ParserRule getRule() { return rule; }
		
		//EnvironmentElement | ElementDescription
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnvironmentElement
		public RuleCall getEnvironmentElementParserRuleCall_0() { return cEnvironmentElementParserRuleCall_0; }
		
		//ElementDescription
		public RuleCall getElementDescriptionParserRuleCall_1() { return cElementDescriptionParserRuleCall_1; }
	}
	public class EnvironmentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.EnvironmentElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObstacleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLightParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObjectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPatchParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cAKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cRegionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//EnvironmentElement:
		//	Obstacle | Light | Object | Patch | 'A' Region;
		@Override public ParserRule getRule() { return rule; }
		
		//Obstacle | Light | Object | Patch | 'A' Region
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Obstacle
		public RuleCall getObstacleParserRuleCall_0() { return cObstacleParserRuleCall_0; }
		
		//Light
		public RuleCall getLightParserRuleCall_1() { return cLightParserRuleCall_1; }
		
		//Object
		public RuleCall getObjectParserRuleCall_2() { return cObjectParserRuleCall_2; }
		
		//Patch
		public RuleCall getPatchParserRuleCall_3() { return cPatchParserRuleCall_3; }
		
		//'A' Region
		public Group getGroup_4() { return cGroup_4; }
		
		//'A'
		public Keyword getAKeyword_4_0() { return cAKeyword_4_0; }
		
		//Region
		public RuleCall getRegionParserRuleCall_4_1() { return cRegionParserRuleCall_4_1; }
	}
	public class ElementDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.ElementDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cElThereKeyword_0_0 = (Keyword)cElAssignment_0.eContents().get(0);
		private final Keyword cAreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXRangeParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Assignment cObjAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjElementParserRuleCall_3_0 = (RuleCall)cObjAssignment_3.eContents().get(0);
		private final Assignment cRAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRProbabilisticDecriptionParserRuleCall_4_0 = (RuleCall)cRAssignment_4.eContents().get(0);
		
		//ElementDescription:
		//	el='There' 'are' x=Range obj=Element r=ProbabilisticDecription;
		@Override public ParserRule getRule() { return rule; }
		
		//el='There' 'are' x=Range obj=Element r=ProbabilisticDecription
		public Group getGroup() { return cGroup; }
		
		//el='There'
		public Assignment getElAssignment_0() { return cElAssignment_0; }
		
		//'There'
		public Keyword getElThereKeyword_0_0() { return cElThereKeyword_0_0; }
		
		//'are'
		public Keyword getAreKeyword_1() { return cAreKeyword_1; }
		
		//x=Range
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//Range
		public RuleCall getXRangeParserRuleCall_2_0() { return cXRangeParserRuleCall_2_0; }
		
		//obj=Element
		public Assignment getObjAssignment_3() { return cObjAssignment_3; }
		
		//Element
		public RuleCall getObjElementParserRuleCall_3_0() { return cObjElementParserRuleCall_3_0; }
		
		//r=ProbabilisticDecription
		public Assignment getRAssignment_4() { return cRAssignment_4; }
		
		//ProbabilisticDecription
		public RuleCall getRProbabilisticDecriptionParserRuleCall_4_0() { return cRProbabilisticDecriptionParserRuleCall_4_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObElParserRuleCall_0_0 = (RuleCall)cObAssignment_0.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDimensionsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDDimension2ParserRuleCall_4_0 = (RuleCall)cDAssignment_4.eContents().get(0);
		
		//Element:
		//	ob=El 'with' 'dimensions' ':' d=Dimension2;
		@Override public ParserRule getRule() { return rule; }
		
		//ob=El 'with' 'dimensions' ':' d=Dimension2
		public Group getGroup() { return cGroup; }
		
		//ob=El
		public Assignment getObAssignment_0() { return cObAssignment_0; }
		
		//El
		public RuleCall getObElParserRuleCall_0_0() { return cObElParserRuleCall_0_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'dimensions'
		public Keyword getDimensionsKeyword_2() { return cDimensionsKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//d=Dimension2
		public Assignment getDAssignment_4() { return cDAssignment_4; }
		
		//Dimension2
		public RuleCall getDDimension2ParserRuleCall_4_0() { return cDDimension2ParserRuleCall_4_0; }
	}
	public class ElElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.El");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cObjectsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cObstaclesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLightKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cSourcesKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cPatchKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//El:
		//	'objects' | 'obstacles' | 'light' 'sources' | 'patch';
		@Override public ParserRule getRule() { return rule; }
		
		//'objects' | 'obstacles' | 'light' 'sources' | 'patch'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'objects'
		public Keyword getObjectsKeyword_0() { return cObjectsKeyword_0; }
		
		//'obstacles'
		public Keyword getObstaclesKeyword_1() { return cObstaclesKeyword_1; }
		
		//'light' 'sources'
		public Group getGroup_2() { return cGroup_2; }
		
		//'light'
		public Keyword getLightKeyword_2_0() { return cLightKeyword_2_0; }
		
		//'sources'
		public Keyword getSourcesKeyword_2_1() { return cSourcesKeyword_2_1; }
		
		//'patch'
		public Keyword getPatchKeyword_3() { return cPatchKeyword_3; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cObjAnKeyword_0_0 = (Keyword)cObjAssignment_0.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRRegionParserRuleCall_4_0 = (RuleCall)cRAssignment_4.eContents().get(0);
		
		//Object:
		//	obj='An' 'object' 'as' 'a' r=Region;
		@Override public ParserRule getRule() { return rule; }
		
		//obj='An' 'object' 'as' 'a' r=Region
		public Group getGroup() { return cGroup; }
		
		//obj='An'
		public Assignment getObjAssignment_0() { return cObjAssignment_0; }
		
		//'An'
		public Keyword getObjAnKeyword_0_0() { return cObjAnKeyword_0_0; }
		
		//'object'
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//'a'
		public Keyword getAKeyword_3() { return cAKeyword_3; }
		
		//r=Region
		public Assignment getRAssignment_4() { return cRAssignment_4; }
		
		//Region
		public RuleCall getRRegionParserRuleCall_4_0() { return cRRegionParserRuleCall_4_0; }
	}
	public class ObstacleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Obstacle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cObsAnKeyword_0_0 = (Keyword)cObsAssignment_0.eContents().get(0);
		private final Keyword cObstacleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRRegionParserRuleCall_4_0 = (RuleCall)cRAssignment_4.eContents().get(0);
		
		//Obstacle:
		//	obs='An' 'obstacle' 'as' 'a' r=Region;
		@Override public ParserRule getRule() { return rule; }
		
		////shape=Shape*
		////dimensions=Dimension
		////position=Position
		//obs='An' 'obstacle' 'as' 'a' r=Region
		public Group getGroup() { return cGroup; }
		
		////shape=Shape*
		////dimensions=Dimension
		////position=Position
		//obs='An'
		public Assignment getObsAssignment_0() { return cObsAssignment_0; }
		
		//'An'
		public Keyword getObsAnKeyword_0_0() { return cObsAnKeyword_0_0; }
		
		//'obstacle'
		public Keyword getObstacleKeyword_1() { return cObstacleKeyword_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//'a'
		public Keyword getAKeyword_3() { return cAKeyword_3; }
		
		//r=Region
		public Assignment getRAssignment_4() { return cRAssignment_4; }
		
		//Region
		public RuleCall getRRegionParserRuleCall_4_0() { return cRRegionParserRuleCall_4_0; }
	}
	public class PatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Patch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPtAKeyword_0_0 = (Keyword)cPtAssignment_0.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCColorParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		private final Keyword cPatchKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRRegionParserRuleCall_5_0 = (RuleCall)cRAssignment_5.eContents().get(0);
		
		//Patch:
		//	pt='A' c=Color 'patch' 'as' 'a' r=Region;
		@Override public ParserRule getRule() { return rule; }
		
		//pt='A' c=Color 'patch' 'as' 'a' r=Region
		public Group getGroup() { return cGroup; }
		
		//pt='A'
		public Assignment getPtAssignment_0() { return cPtAssignment_0; }
		
		//'A'
		public Keyword getPtAKeyword_0_0() { return cPtAKeyword_0_0; }
		
		//c=Color
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//Color
		public RuleCall getCColorParserRuleCall_1_0() { return cCColorParserRuleCall_1_0; }
		
		//'patch'
		public Keyword getPatchKeyword_2() { return cPatchKeyword_2; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//'a'
		public Keyword getAKeyword_4() { return cAKeyword_4; }
		
		//r=Region
		public Assignment getRAssignment_5() { return cRAssignment_5; }
		
		//Region
		public RuleCall getRRegionParserRuleCall_5_0() { return cRRegionParserRuleCall_5_0; }
	}
	public class LightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Light");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cLAKeyword_0_0 = (Keyword)cLAssignment_0.eContents().get(0);
		private final Keyword cLightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSourceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEmittingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCColorParserRuleCall_5_0 = (RuleCall)cCAssignment_5.eContents().get(0);
		private final Keyword cLightKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cPlacedKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cAtKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cPAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPPositionParserRuleCall_10_0 = (RuleCall)cPAssignment_10.eContents().get(0);
		
		//Light:
		//	l='A' 'light' 'source' 'emitting' 'a' c=Color 'light' 'is' 'placed' 'at' p=Position;
		@Override public ParserRule getRule() { return rule; }
		
		//l='A' 'light' 'source' 'emitting' 'a' c=Color 'light' 'is' 'placed' 'at' p=Position
		public Group getGroup() { return cGroup; }
		
		//l='A'
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//'A'
		public Keyword getLAKeyword_0_0() { return cLAKeyword_0_0; }
		
		//'light'
		public Keyword getLightKeyword_1() { return cLightKeyword_1; }
		
		//'source'
		public Keyword getSourceKeyword_2() { return cSourceKeyword_2; }
		
		//'emitting'
		public Keyword getEmittingKeyword_3() { return cEmittingKeyword_3; }
		
		//'a'
		public Keyword getAKeyword_4() { return cAKeyword_4; }
		
		//c=Color
		public Assignment getCAssignment_5() { return cCAssignment_5; }
		
		//Color
		public RuleCall getCColorParserRuleCall_5_0() { return cCColorParserRuleCall_5_0; }
		
		//'light'
		public Keyword getLightKeyword_6() { return cLightKeyword_6; }
		
		//'is'
		public Keyword getIsKeyword_7() { return cIsKeyword_7; }
		
		//'placed'
		public Keyword getPlacedKeyword_8() { return cPlacedKeyword_8; }
		
		//'at'
		public Keyword getAtKeyword_9() { return cAtKeyword_9; }
		
		//p=Position
		public Assignment getPAssignment_10() { return cPAssignment_10; }
		
		//Position
		public RuleCall getPPositionParserRuleCall_10_0() { return cPPositionParserRuleCall_10_0; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cCenterKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cAtKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cReferenceKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cPointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPointAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPointAlternatives_2_0 = (Alternatives)cPointAssignment_2.eContents().get(0);
		private final RuleCall cPointCoordinate2DParserRuleCall_2_0_0 = (RuleCall)cPointAlternatives_2_0.eContents().get(0);
		private final RuleCall cPointCoordinate3DParserRuleCall_2_0_1 = (RuleCall)cPointAlternatives_2_0.eContents().get(1);
		
		//Position:
		//	('center' 'at' | 'reference')? 'point' point=(Coordinate2D | Coordinate3D);
		@Override public ParserRule getRule() { return rule; }
		
		//('center' 'at' | 'reference')? 'point' point=(Coordinate2D | Coordinate3D)
		public Group getGroup() { return cGroup; }
		
		//('center' 'at' | 'reference')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'center' 'at'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'center'
		public Keyword getCenterKeyword_0_0_0() { return cCenterKeyword_0_0_0; }
		
		//'at'
		public Keyword getAtKeyword_0_0_1() { return cAtKeyword_0_0_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_0_1() { return cReferenceKeyword_0_1; }
		
		//'point'
		public Keyword getPointKeyword_1() { return cPointKeyword_1; }
		
		//point=(Coordinate2D | Coordinate3D)
		public Assignment getPointAssignment_2() { return cPointAssignment_2; }
		
		//(Coordinate2D | Coordinate3D)
		public Alternatives getPointAlternatives_2_0() { return cPointAlternatives_2_0; }
		
		//Coordinate2D
		public RuleCall getPointCoordinate2DParserRuleCall_2_0_0() { return cPointCoordinate2DParserRuleCall_2_0_0; }
		
		//Coordinate3D
		public RuleCall getPointCoordinate3DParserRuleCall_2_0_1() { return cPointCoordinate3DParserRuleCall_2_0_1; }
	}
	public class Shape2DElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Shape2D");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCircleKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPolygonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTriangleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRectangleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDodecagonKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHexagonKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSquareKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRegionKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Shape2D:
		//	'Circle' | 'Polygon' | 'Triangle' | 'Rectangle' | 'Dodecagon' | 'Hexagon' | 'Square' | 'Region';
		@Override public ParserRule getRule() { return rule; }
		
		//'Circle' | 'Polygon' | 'Triangle' | 'Rectangle' | 'Dodecagon' | 'Hexagon' | 'Square' | 'Region'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Circle'
		public Keyword getCircleKeyword_0() { return cCircleKeyword_0; }
		
		//'Polygon'
		public Keyword getPolygonKeyword_1() { return cPolygonKeyword_1; }
		
		//'Triangle'
		public Keyword getTriangleKeyword_2() { return cTriangleKeyword_2; }
		
		//'Rectangle'
		public Keyword getRectangleKeyword_3() { return cRectangleKeyword_3; }
		
		//'Dodecagon'
		public Keyword getDodecagonKeyword_4() { return cDodecagonKeyword_4; }
		
		//'Hexagon'
		public Keyword getHexagonKeyword_5() { return cHexagonKeyword_5; }
		
		//'Square'
		public Keyword getSquareKeyword_6() { return cSquareKeyword_6; }
		
		//'Region'
		public Keyword getRegionKeyword_7() { return cRegionKeyword_7; }
	}
	public class Shape3DElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Shape3D");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRectangularCuboidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCubeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCylinderKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Shape3D:
		//	'Rectangular cuboid' | 'Cube' | 'Cylinder';
		@Override public ParserRule getRule() { return rule; }
		
		//'Rectangular cuboid' | 'Cube' | 'Cylinder'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Rectangular cuboid'
		public Keyword getRectangularCuboidKeyword_0() { return cRectangularCuboidKeyword_0; }
		
		//'Cube'
		public Keyword getCubeKeyword_1() { return cCubeKeyword_1; }
		
		//'Cylinder'
		public Keyword getCylinderKeyword_2() { return cCylinderKeyword_2; }
	}
	public class ArenaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Arena");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cArenaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSRegionParserRuleCall_4_0 = (RuleCall)cSAssignment_4.eContents().get(0);
		private final Keyword cSurroundedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cByKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cWallsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Arena:
		//	'The' 'arena' 'is' 'a' s=Region 'surrounded' 'by' 'walls' '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'The' 'arena' 'is' 'a' s=Region 'surrounded' 'by' 'walls' '.'
		public Group getGroup() { return cGroup; }
		
		//'The'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'arena'
		public Keyword getArenaKeyword_1() { return cArenaKeyword_1; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//'a'
		public Keyword getAKeyword_3() { return cAKeyword_3; }
		
		//s=Region
		public Assignment getSAssignment_4() { return cSAssignment_4; }
		
		//Region
		public RuleCall getSRegionParserRuleCall_4_0() { return cSRegionParserRuleCall_4_0; }
		
		//'surrounded'
		public Keyword getSurroundedKeyword_5() { return cSurroundedKeyword_5; }
		
		//'by'
		public Keyword getByKeyword_6() { return cByKeyword_6; }
		
		//'walls'
		public Keyword getWallsKeyword_7() { return cWallsKeyword_7; }
		
		//'.'
		public Keyword getFullStopKeyword_8() { return cFullStopKeyword_8; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cYellowKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreenKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGrayKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBlackKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cWhiteKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		////. 'with' dimensions=Dimension;
		//Color:
		//	'red' | 'yellow' | 'green' | 'gray' | 'black' | 'white';
		@Override public ParserRule getRule() { return rule; }
		
		//'red' | 'yellow' | 'green' | 'gray' | 'black' | 'white'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'red'
		public Keyword getRedKeyword_0() { return cRedKeyword_0; }
		
		//'yellow'
		public Keyword getYellowKeyword_1() { return cYellowKeyword_1; }
		
		//'green'
		public Keyword getGreenKeyword_2() { return cGreenKeyword_2; }
		
		//'gray'
		public Keyword getGrayKeyword_3() { return cGrayKeyword_3; }
		
		//'black'
		public Keyword getBlackKeyword_4() { return cBlackKeyword_4; }
		
		//'white'
		public Keyword getWhiteKeyword_5() { return cWhiteKeyword_5; }
	}
	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColorsColorParserRuleCall_0_0 = (RuleCall)cColorsAssignment_0.eContents().get(0);
		private final Assignment cShape2dAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShape2dShape2DParserRuleCall_1_0 = (RuleCall)cShape2dAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cRegionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegionRegionDefinitionParserRuleCall_3_0 = (RuleCall)cRegionAssignment_3.eContents().get(0);
		
		////Region:
		//// 'Circle' | 'Polygon';
		//Region:
		//	colors=Color? shape2d=Shape2D name=ID region=RegionDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//colors=Color? shape2d=Shape2D name=ID region=RegionDefinition
		public Group getGroup() { return cGroup; }
		
		//colors=Color?
		public Assignment getColorsAssignment_0() { return cColorsAssignment_0; }
		
		//Color
		public RuleCall getColorsColorParserRuleCall_0_0() { return cColorsColorParserRuleCall_0_0; }
		
		//shape2d=Shape2D
		public Assignment getShape2dAssignment_1() { return cShape2dAssignment_1; }
		
		//Shape2D
		public RuleCall getShape2dShape2DParserRuleCall_1_0() { return cShape2dShape2DParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//region=RegionDefinition
		public Assignment getRegionAssignment_3() { return cRegionAssignment_3; }
		
		//RegionDefinition
		public RuleCall getRegionRegionDefinitionParserRuleCall_3_0() { return cRegionRegionDefinitionParserRuleCall_3_0; }
	}
	public class RegionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.RegionDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionOneParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionTwoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefinitionThreeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RegionDefinition:
		//	DefinitionOne | DefinitionTwo | DefinitionThree;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionOne | DefinitionTwo | DefinitionThree
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefinitionOne
		public RuleCall getDefinitionOneParserRuleCall_0() { return cDefinitionOneParserRuleCall_0; }
		
		//DefinitionTwo
		public RuleCall getDefinitionTwoParserRuleCall_1() { return cDefinitionTwoParserRuleCall_1; }
		
		//DefinitionThree
		public RuleCall getDefinitionThreeParserRuleCall_2() { return cDefinitionThreeParserRuleCall_2; }
	}
	public class DefinitionOneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.DefinitionOne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cReferencepointAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cReferencepointPositionParserRuleCall_0_1_0 = (RuleCall)cReferencepointAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimensionsDimensionParserRuleCall_1_1_0 = (RuleCall)cDimensionsAssignment_1_1.eContents().get(0);
		
		//DefinitionOne:
		//	('with' referencepoint=Position)? ('and' dimensions=Dimension)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('with' referencepoint=Position)? ('and' dimensions=Dimension)?
		public Group getGroup() { return cGroup; }
		
		//('with' referencepoint=Position)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'with'
		public Keyword getWithKeyword_0_0() { return cWithKeyword_0_0; }
		
		//referencepoint=Position
		public Assignment getReferencepointAssignment_0_1() { return cReferencepointAssignment_0_1; }
		
		//Position
		public RuleCall getReferencepointPositionParserRuleCall_0_1_0() { return cReferencepointPositionParserRuleCall_0_1_0; }
		
		//('and' dimensions=Dimension)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//dimensions=Dimension
		public Assignment getDimensionsAssignment_1_1() { return cDimensionsAssignment_1_1; }
		
		//Dimension
		public RuleCall getDimensionsDimensionParserRuleCall_1_1_0() { return cDimensionsDimensionParserRuleCall_1_1_0; }
	}
	public class DefinitionTwoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.DefinitionTwo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThroughKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFollowingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cVerticesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPointAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPointPositionParserRuleCall_6_0 = (RuleCall)cPointAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPointAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPointPositionParserRuleCall_7_1_0 = (RuleCall)cPointAssignment_7_1.eContents().get(0);
		
		//DefinitionTwo:
		//	'defined' 'through' 'the' 'following' 'Vertices' ':' point+=Position (';' point+=Position)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'defined' 'through' 'the' 'following' 'Vertices' ':' point+=Position (';' point+=Position)*
		public Group getGroup() { return cGroup; }
		
		//'defined'
		public Keyword getDefinedKeyword_0() { return cDefinedKeyword_0; }
		
		//'through'
		public Keyword getThroughKeyword_1() { return cThroughKeyword_1; }
		
		//'the'
		public Keyword getTheKeyword_2() { return cTheKeyword_2; }
		
		//'following'
		public Keyword getFollowingKeyword_3() { return cFollowingKeyword_3; }
		
		//'Vertices'
		public Keyword getVerticesKeyword_4() { return cVerticesKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//point+=Position
		public Assignment getPointAssignment_6() { return cPointAssignment_6; }
		
		//Position
		public RuleCall getPointPositionParserRuleCall_6_0() { return cPointPositionParserRuleCall_6_0; }
		
		//(';' point+=Position)*
		public Group getGroup_7() { return cGroup_7; }
		
		//';'
		public Keyword getSemicolonKeyword_7_0() { return cSemicolonKeyword_7_0; }
		
		//point+=Position
		public Assignment getPointAssignment_7_1() { return cPointAssignment_7_1; }
		
		//Position
		public RuleCall getPointPositionParserRuleCall_7_1_0() { return cPointPositionParserRuleCall_7_1_0; }
	}
	public class DefinitionThreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.DefinitionThree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAxAxisParserRuleCall_1_0 = (RuleCall)cAxAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRRangeParserRuleCall_3_0 = (RuleCall)cRAssignment_3.eContents().get(0);
		
		//DefinitionThree:
		//	'where' ax=Axis 'is' r=Range;
		@Override public ParserRule getRule() { return rule; }
		
		//'where' ax=Axis 'is' r=Range
		public Group getGroup() { return cGroup; }
		
		//'where'
		public Keyword getWhereKeyword_0() { return cWhereKeyword_0; }
		
		//ax=Axis
		public Assignment getAxAssignment_1() { return cAxAssignment_1; }
		
		//Axis
		public RuleCall getAxAxisParserRuleCall_1_0() { return cAxAxisParserRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//r=Range
		public Assignment getRAssignment_3() { return cRAssignment_3; }
		
		//Range
		public RuleCall getRRangeParserRuleCall_3_0() { return cRRangeParserRuleCall_3_0; }
	}
	public class AxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Axis");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cYKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Axis:
		//	'x' | 'y';
		@Override public ParserRule getRule() { return rule; }
		
		//'x' | 'y'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'x'
		public Keyword getXKeyword_0() { return cXKeyword_0; }
		
		//'y'
		public Keyword getYKeyword_1() { return cYKeyword_1; }
	}
	public class DimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Dimension");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDimension1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDimension2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDimension3ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////Type: 
		////	CircleD | RectangleD	
		////;
		//Dimension:
		//	Dimension1 | Dimension2 | Dimension3;
		@Override public ParserRule getRule() { return rule; }
		
		//Dimension1 | Dimension2 | Dimension3
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Dimension1
		public RuleCall getDimension1ParserRuleCall_0() { return cDimension1ParserRuleCall_0; }
		
		//Dimension2
		public RuleCall getDimension2ParserRuleCall_1() { return cDimension2ParserRuleCall_1; }
		
		//Dimension3
		public RuleCall getDimension3ParserRuleCall_2() { return cDimension3ParserRuleCall_2; }
	}
	public class Dimension1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Dimension1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRadiusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRDoubleParserRuleCall_1_0 = (RuleCall)cRAssignment_1.eContents().get(0);
		private final Assignment cM1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cM1MetricParserRuleCall_2_0 = (RuleCall)cM1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cHeightKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cHAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cHDoubleParserRuleCall_3_2_0 = (RuleCall)cHAssignment_3_2.eContents().get(0);
		private final Assignment cM2Assignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cM2MetricParserRuleCall_3_3_0 = (RuleCall)cM2Assignment_3_3.eContents().get(0);
		
		//Dimension1:
		//	'radius' r=Double m1=Metric ('and' 'height' h=Double m2=Metric)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'radius' r=Double m1=Metric ('and' 'height' h=Double m2=Metric)?
		public Group getGroup() { return cGroup; }
		
		//'radius'
		public Keyword getRadiusKeyword_0() { return cRadiusKeyword_0; }
		
		//r=Double
		public Assignment getRAssignment_1() { return cRAssignment_1; }
		
		//Double
		public RuleCall getRDoubleParserRuleCall_1_0() { return cRDoubleParserRuleCall_1_0; }
		
		//m1=Metric
		public Assignment getM1Assignment_2() { return cM1Assignment_2; }
		
		//Metric
		public RuleCall getM1MetricParserRuleCall_2_0() { return cM1MetricParserRuleCall_2_0; }
		
		//('and' 'height' h=Double m2=Metric)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//'height'
		public Keyword getHeightKeyword_3_1() { return cHeightKeyword_3_1; }
		
		//h=Double
		public Assignment getHAssignment_3_2() { return cHAssignment_3_2; }
		
		//Double
		public RuleCall getHDoubleParserRuleCall_3_2_0() { return cHDoubleParserRuleCall_3_2_0; }
		
		//m2=Metric
		public Assignment getM2Assignment_3_3() { return cM2Assignment_3_3; }
		
		//Metric
		public RuleCall getM2MetricParserRuleCall_3_3_0() { return cM2MetricParserRuleCall_3_3_0; }
	}
	public class Dimension2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Dimension2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLDoubleParserRuleCall_1_0 = (RuleCall)cLAssignment_1.eContents().get(0);
		private final Assignment cM3Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cM3MetricParserRuleCall_2_0 = (RuleCall)cM3Assignment_2.eContents().get(0);
		private final Keyword cWidthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWDoubleParserRuleCall_4_0 = (RuleCall)cWAssignment_4.eContents().get(0);
		private final Assignment cM4Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cM4MetricParserRuleCall_5_0 = (RuleCall)cM4Assignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAndKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cHeightKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cHAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cHDoubleParserRuleCall_6_2_0 = (RuleCall)cHAssignment_6_2.eContents().get(0);
		private final Assignment cM5Assignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cM5MetricParserRuleCall_6_3_0 = (RuleCall)cM5Assignment_6_3.eContents().get(0);
		
		//Dimension2:
		//	'length' l=Double m3=Metric ',width' w=Double m4=Metric ('and' 'height' h=Double m5=Metric)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'length' l=Double m3=Metric ',width' w=Double m4=Metric ('and' 'height' h=Double m5=Metric)?
		public Group getGroup() { return cGroup; }
		
		//'length'
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }
		
		//l=Double
		public Assignment getLAssignment_1() { return cLAssignment_1; }
		
		//Double
		public RuleCall getLDoubleParserRuleCall_1_0() { return cLDoubleParserRuleCall_1_0; }
		
		//m3=Metric
		public Assignment getM3Assignment_2() { return cM3Assignment_2; }
		
		//Metric
		public RuleCall getM3MetricParserRuleCall_2_0() { return cM3MetricParserRuleCall_2_0; }
		
		//',width'
		public Keyword getWidthKeyword_3() { return cWidthKeyword_3; }
		
		//w=Double
		public Assignment getWAssignment_4() { return cWAssignment_4; }
		
		//Double
		public RuleCall getWDoubleParserRuleCall_4_0() { return cWDoubleParserRuleCall_4_0; }
		
		//m4=Metric
		public Assignment getM4Assignment_5() { return cM4Assignment_5; }
		
		//Metric
		public RuleCall getM4MetricParserRuleCall_5_0() { return cM4MetricParserRuleCall_5_0; }
		
		//('and' 'height' h=Double m5=Metric)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'and'
		public Keyword getAndKeyword_6_0() { return cAndKeyword_6_0; }
		
		//'height'
		public Keyword getHeightKeyword_6_1() { return cHeightKeyword_6_1; }
		
		//h=Double
		public Assignment getHAssignment_6_2() { return cHAssignment_6_2; }
		
		//Double
		public RuleCall getHDoubleParserRuleCall_6_2_0() { return cHDoubleParserRuleCall_6_2_0; }
		
		//m5=Metric
		public Assignment getM5Assignment_6_3() { return cM5Assignment_6_3; }
		
		//Metric
		public RuleCall getM5MetricParserRuleCall_6_3_0() { return cM5MetricParserRuleCall_6_3_0; }
	}
	public class Dimension3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Dimension3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSDoubleParserRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		private final Assignment cM6Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cM6MetricParserRuleCall_2_0 = (RuleCall)cM6Assignment_2.eContents().get(0);
		
		//Dimension3:
		//	'side' s=Double m6=Metric;
		@Override public ParserRule getRule() { return rule; }
		
		//'side' s=Double m6=Metric
		public Group getGroup() { return cGroup; }
		
		//'side'
		public Keyword getSideKeyword_0() { return cSideKeyword_0; }
		
		//s=Double
		public Assignment getSAssignment_1() { return cSAssignment_1; }
		
		//Double
		public RuleCall getSDoubleParserRuleCall_1_0() { return cSDoubleParserRuleCall_1_0; }
		
		//m6=Metric
		public Assignment getM6Assignment_2() { return cM6Assignment_2; }
		
		//Metric
		public RuleCall getM6MetricParserRuleCall_2_0() { return cM6MetricParserRuleCall_2_0; }
	}
	public class Coordinate2DElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Coordinate2D");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXDoubleParserRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYDoubleParserRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		
		////Dimension:
		////CircleD | RectangleD | SquareD
		////;
		////{CircleD} 'radius' r=Double | 
		////{RectangleD} 'length' l=Double ',width' w=Double 'and' 'height' h=Double ; //|
		////types=[CircleD | ]
		////{SquareD} 'side' a=Double;
		////CircleD:
		////	'radius' r=Double
		////;
		////RectangleD:
		////	'length' l=Double ',width' w=Double 'and' 'height' h=Double 
		////;
		//// SquareD:
		//// 	'side' a=Double
		//// ;
		//Coordinate2D:
		//	x=Double ',' y=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//x=Double ',' y=Double
		public Group getGroup() { return cGroup; }
		
		//x=Double
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//Double
		public RuleCall getXDoubleParserRuleCall_0_0() { return cXDoubleParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//y=Double
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//Double
		public RuleCall getYDoubleParserRuleCall_2_0() { return cYDoubleParserRuleCall_2_0; }
	}
	public class Coordinate3DElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Coordinate3D");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXDoubleParserRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYDoubleParserRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cZAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cZDoubleParserRuleCall_4_0 = (RuleCall)cZAssignment_4.eContents().get(0);
		
		//Coordinate3D:
		//	x=Double ',' y=Double ',' z=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//x=Double ',' y=Double ',' z=Double
		public Group getGroup() { return cGroup; }
		
		//x=Double
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//Double
		public RuleCall getXDoubleParserRuleCall_0_0() { return cXDoubleParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//y=Double
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//Double
		public RuleCall getYDoubleParserRuleCall_2_0() { return cYDoubleParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//z=Double
		public Assignment getZAssignment_4() { return cZAssignment_4; }
		
		//Double
		public RuleCall getZDoubleParserRuleCall_4_0() { return cZDoubleParserRuleCall_4_0; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Double:
		//	'-'? INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Range");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpperboundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLowerboundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntervalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLowerorEqualboundParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUpperorEqualboundParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConstantSizeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Range:
		//	Upperbound | Lowerbound | Interval | LowerorEqualbound | UpperorEqualbound | ConstantSize;
		@Override public ParserRule getRule() { return rule; }
		
		//Upperbound | Lowerbound | Interval | LowerorEqualbound | UpperorEqualbound | ConstantSize
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Upperbound
		public RuleCall getUpperboundParserRuleCall_0() { return cUpperboundParserRuleCall_0; }
		
		//Lowerbound
		public RuleCall getLowerboundParserRuleCall_1() { return cLowerboundParserRuleCall_1; }
		
		//Interval
		public RuleCall getIntervalParserRuleCall_2() { return cIntervalParserRuleCall_2; }
		
		//LowerorEqualbound
		public RuleCall getLowerorEqualboundParserRuleCall_3() { return cLowerorEqualboundParserRuleCall_3; }
		
		//UpperorEqualbound
		public RuleCall getUpperorEqualboundParserRuleCall_4() { return cUpperorEqualboundParserRuleCall_4; }
		
		//ConstantSize
		public RuleCall getConstantSizeParserRuleCall_5() { return cConstantSizeParserRuleCall_5; }
	}
	public class ConstantSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.ConstantSize");
		private final Assignment cNAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNDoubleParserRuleCall_0 = (RuleCall)cNAssignment.eContents().get(0);
		
		//ConstantSize:
		//	n=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//n=Double
		public Assignment getNAssignment() { return cNAssignment; }
		
		//Double
		public RuleCall getNDoubleParserRuleCall_0() { return cNDoubleParserRuleCall_0; }
	}
	public class LowerboundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Lowerbound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNDoubleParserRuleCall_2_0 = (RuleCall)cNAssignment_2.eContents().get(0);
		
		//Lowerbound:
		//	'less' 'than' n=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//'less' 'than' n=Double
		public Group getGroup() { return cGroup; }
		
		//'less'
		public Keyword getLessKeyword_0() { return cLessKeyword_0; }
		
		//'than'
		public Keyword getThanKeyword_1() { return cThanKeyword_1; }
		
		//n=Double
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//Double
		public RuleCall getNDoubleParserRuleCall_2_0() { return cNDoubleParserRuleCall_2_0; }
	}
	public class LowerorEqualboundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.LowerorEqualbound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cThanKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNDoubleParserRuleCall_4_0 = (RuleCall)cNAssignment_4.eContents().get(0);
		
		//LowerorEqualbound:
		//	'less' 'or' 'equal' 'than' n=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//'less' 'or' 'equal' 'than' n=Double
		public Group getGroup() { return cGroup; }
		
		//'less'
		public Keyword getLessKeyword_0() { return cLessKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'equal'
		public Keyword getEqualKeyword_2() { return cEqualKeyword_2; }
		
		//'than'
		public Keyword getThanKeyword_3() { return cThanKeyword_3; }
		
		//n=Double
		public Assignment getNAssignment_4() { return cNAssignment_4; }
		
		//Double
		public RuleCall getNDoubleParserRuleCall_4_0() { return cNDoubleParserRuleCall_4_0; }
	}
	public class UpperboundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Upperbound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNDoubleParserRuleCall_2_0 = (RuleCall)cNAssignment_2.eContents().get(0);
		
		//Upperbound:
		//	'more' 'than' n=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//'more' 'than' n=Double
		public Group getGroup() { return cGroup; }
		
		//'more'
		public Keyword getMoreKeyword_0() { return cMoreKeyword_0; }
		
		//'than'
		public Keyword getThanKeyword_1() { return cThanKeyword_1; }
		
		//n=Double
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//Double
		public RuleCall getNDoubleParserRuleCall_2_0() { return cNDoubleParserRuleCall_2_0; }
	}
	public class UpperorEqualboundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.UpperorEqualbound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cThanKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNDoubleParserRuleCall_4_0 = (RuleCall)cNAssignment_4.eContents().get(0);
		
		//UpperorEqualbound:
		//	'more' 'or' 'equal' 'than' n=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//'more' 'or' 'equal' 'than' n=Double
		public Group getGroup() { return cGroup; }
		
		//'more'
		public Keyword getMoreKeyword_0() { return cMoreKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'equal'
		public Keyword getEqualKeyword_2() { return cEqualKeyword_2; }
		
		//'than'
		public Keyword getThanKeyword_3() { return cThanKeyword_3; }
		
		//n=Double
		public Assignment getNAssignment_4() { return cNAssignment_4; }
		
		//Double
		public RuleCall getNDoubleParserRuleCall_4_0() { return cNDoubleParserRuleCall_4_0; }
	}
	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sml.Sml.Interval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNDoubleParserRuleCall_0_0 = (RuleCall)cNAssignment_0.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMDoubleParserRuleCall_2_0 = (RuleCall)cMAssignment_2.eContents().get(0);
		
		////
		//Interval:
		//	n=Double 'to' m=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//n=Double 'to' m=Double
		public Group getGroup() { return cGroup; }
		
		//n=Double
		public Assignment getNAssignment_0() { return cNAssignment_0; }
		
		//Double
		public RuleCall getNDoubleParserRuleCall_0_0() { return cNDoubleParserRuleCall_0_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//m=Double
		public Assignment getMAssignment_2() { return cMAssignment_2; }
		
		//Double
		public RuleCall getMDoubleParserRuleCall_2_0() { return cMDoubleParserRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final EnvironmentElements pEnvironment;
	private final ProbabilisticDecriptionElements pProbabilisticDecription;
	private final SwarmconfElements pSwarmconf;
	private final MissionSpecificationElements pMissionSpecification;
	private final MissionTimeElements pMissionTime;
	private final MissionElements pMission;
	private final TaskElements pTask;
	private final AggregateElements pAggregate;
	private final MigrationElements pMigration;
	private final ForagingElements pForaging;
	private final MetricElements pMetric;
	private final MissionObjectiveElements pMissionObjective;
	private final IndicatorElements pIndicator;
	private final AtomicIndicatorElements pAtomicIndicator;
	private final CompoundIndicatorElements pCompoundIndicator;
	private final ScopeElements pScope;
	private final AtomicEventElements pAtomicEvent;
	private final OccurenceElements pOccurence;
	private final PenaltyElements pPenalty;
	private final RewardElements pReward;
	private final ConditionElements pCondition;
	private final TimeElements pTime;
	private final RobotElements pRobot;
	private final DistributionElements pDistribution;
	private final EnvironmentElementsElements pEnvironmentElements;
	private final EnvironmentElementElements pEnvironmentElement;
	private final ElementDescriptionElements pElementDescription;
	private final ElementElements pElement;
	private final ElElements pEl;
	private final ObjectElements pObject;
	private final ObstacleElements pObstacle;
	private final PatchElements pPatch;
	private final LightElements pLight;
	private final PositionElements pPosition;
	private final Shape2DElements pShape2D;
	private final Shape3DElements pShape3D;
	private final ArenaElements pArena;
	private final ColorElements pColor;
	private final RegionElements pRegion;
	private final RegionDefinitionElements pRegionDefinition;
	private final DefinitionOneElements pDefinitionOne;
	private final DefinitionTwoElements pDefinitionTwo;
	private final DefinitionThreeElements pDefinitionThree;
	private final AxisElements pAxis;
	private final DimensionElements pDimension;
	private final Dimension1Elements pDimension1;
	private final Dimension2Elements pDimension2;
	private final Dimension3Elements pDimension3;
	private final Coordinate2DElements pCoordinate2D;
	private final Coordinate3DElements pCoordinate3D;
	private final DoubleElements pDouble;
	private final RangeElements pRange;
	private final ConstantSizeElements pConstantSize;
	private final LowerboundElements pLowerbound;
	private final LowerorEqualboundElements pLowerorEqualbound;
	private final UpperboundElements pUpperbound;
	private final UpperorEqualboundElements pUpperorEqualbound;
	private final IntervalElements pInterval;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEnvironment = new EnvironmentElements();
		this.pProbabilisticDecription = new ProbabilisticDecriptionElements();
		this.pSwarmconf = new SwarmconfElements();
		this.pMissionSpecification = new MissionSpecificationElements();
		this.pMissionTime = new MissionTimeElements();
		this.pMission = new MissionElements();
		this.pTask = new TaskElements();
		this.pAggregate = new AggregateElements();
		this.pMigration = new MigrationElements();
		this.pForaging = new ForagingElements();
		this.pMetric = new MetricElements();
		this.pMissionObjective = new MissionObjectiveElements();
		this.pIndicator = new IndicatorElements();
		this.pAtomicIndicator = new AtomicIndicatorElements();
		this.pCompoundIndicator = new CompoundIndicatorElements();
		this.pScope = new ScopeElements();
		this.pAtomicEvent = new AtomicEventElements();
		this.pOccurence = new OccurenceElements();
		this.pPenalty = new PenaltyElements();
		this.pReward = new RewardElements();
		this.pCondition = new ConditionElements();
		this.pTime = new TimeElements();
		this.pRobot = new RobotElements();
		this.pDistribution = new DistributionElements();
		this.pEnvironmentElements = new EnvironmentElementsElements();
		this.pEnvironmentElement = new EnvironmentElementElements();
		this.pElementDescription = new ElementDescriptionElements();
		this.pElement = new ElementElements();
		this.pEl = new ElElements();
		this.pObject = new ObjectElements();
		this.pObstacle = new ObstacleElements();
		this.pPatch = new PatchElements();
		this.pLight = new LightElements();
		this.pPosition = new PositionElements();
		this.pShape2D = new Shape2DElements();
		this.pShape3D = new Shape3DElements();
		this.pArena = new ArenaElements();
		this.pColor = new ColorElements();
		this.pRegion = new RegionElements();
		this.pRegionDefinition = new RegionDefinitionElements();
		this.pDefinitionOne = new DefinitionOneElements();
		this.pDefinitionTwo = new DefinitionTwoElements();
		this.pDefinitionThree = new DefinitionThreeElements();
		this.pAxis = new AxisElements();
		this.pDimension = new DimensionElements();
		this.pDimension1 = new Dimension1Elements();
		this.pDimension2 = new Dimension2Elements();
		this.pDimension3 = new Dimension3Elements();
		this.pCoordinate2D = new Coordinate2DElements();
		this.pCoordinate3D = new Coordinate3DElements();
		this.pDouble = new DoubleElements();
		this.pRange = new RangeElements();
		this.pConstantSize = new ConstantSizeElements();
		this.pLowerbound = new LowerboundElements();
		this.pLowerorEqualbound = new LowerorEqualboundElements();
		this.pUpperbound = new UpperboundElements();
		this.pUpperorEqualbound = new UpperorEqualboundElements();
		this.pInterval = new IntervalElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.sml.Sml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	arenas=Arena env=Environment sw=Swarmconf* ms=MissionSpecification*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Environment:
	//	('The' 'arena' 'contains' 'the' 'following' 'elements' ':')? environment+=EnvironmentElements*;
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//ProbabilisticDecription:
	//	'distributed' 'with' 'a' dis=Distribution 'distribution' 'in' k=[Region];
	public ProbabilisticDecriptionElements getProbabilisticDecriptionAccess() {
		return pProbabilisticDecription;
	}
	
	public ParserRule getProbabilisticDecriptionRule() {
		return getProbabilisticDecriptionAccess().getRule();
	}
	
	//Swarmconf:
	//	'The' 'robot' 'swarm' 'consists' 'of' x=Range r=Robot pr=ProbabilisticDecription
	//	//('distributed' 'in' dis=Distribution 'way' 'in' k=Region )*
	//;
	public SwarmconfElements getSwarmconfAccess() {
		return pSwarmconf;
	}
	
	public ParserRule getSwarmconfRule() {
		return getSwarmconfAccess().getRule();
	}
	
	//MissionSpecification:
	//	m=Mission mt=MissionTime ob=MissionObjective;
	public MissionSpecificationElements getMissionSpecificationAccess() {
		return pMissionSpecification;
	}
	
	public ParserRule getMissionSpecificationRule() {
		return getMissionSpecificationAccess().getRule();
	}
	
	//MissionTime:
	//	'The' 'total' 'time' 'of' 'the' 'mission' 'is' t=Range m=Metric;
	public MissionTimeElements getMissionTimeAccess() {
		return pMissionTime;
	}
	
	public ParserRule getMissionTimeRule() {
		return getMissionTimeAccess().getRule();
	}
	
	//Mission:
	//	'The' 'mission' 'of' 'the' 'robots' 'is' 'to' t=Task;
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//Task:
	//	Aggregate | Migration | Foraging;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Aggregate:
	//	'aggregate' 'on' r+=[Region] (',' r+=[Region])*;
	public AggregateElements getAggregateAccess() {
		return pAggregate;
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}
	
	//Migration:
	//	'aggregate' 'on' r+=[Region] (',' r+=[Region])* 'while' 'avoiding' t+=[Region] (',' t+=[Region])*;
	public MigrationElements getMigrationAccess() {
		return pMigration;
	}
	
	public ParserRule getMigrationRule() {
		return getMigrationAccess().getRule();
	}
	
	//Foraging:
	//	'collect' 'food' 'from' source+=[Region] (',' source+=[Region])* 'and' 'bring' 'it' 'back' 'to' nest=[Region] (','
	//	source+=[Region])*;
	public ForagingElements getForagingAccess() {
		return pForaging;
	}
	
	public ParserRule getForagingRule() {
		return getForagingAccess().getRule();
	}
	
	//Metric:
	//	'seconds' | 'steps' | 'm';
	public MetricElements getMetricAccess() {
		return pMetric;
	}
	
	public ParserRule getMetricRule() {
		return getMetricAccess().getRule();
	}
	
	//MissionObjective:
	//	'The' 'performance' 'measure' 'is' 'defined' 'in' 'terms' 'of' 'an' 'objective' 'function' 'to' 'be'
	//	Type=('maximized.' | 'minimized.')
	//	'The' 'objective' 'function' 'is' 'computed' 'as' 'follows:' in+=Indicator*
	//	//	'The' 'performance' 'measure' 'is' 'defined' 'in' 'terms' 'of' 'an' 'objective' 'function' 'that' 'maximizes' 'the' 'following' 'score' ':' 
	//;
	public MissionObjectiveElements getMissionObjectiveAccess() {
		return pMissionObjective;
	}
	
	public ParserRule getMissionObjectiveRule() {
		return getMissionObjectiveAccess().getRule();
	}
	
	//Indicator:
	//	sp=Scope oc=(AtomicIndicator | CompoundIndicator);
	public IndicatorElements getIndicatorAccess() {
		return pIndicator;
	}
	
	public ParserRule getIndicatorRule() {
		return getIndicatorAccess().getRule();
	}
	
	//AtomicIndicator:
	//	'each' 'robot' oc=Occurence;
	public AtomicIndicatorElements getAtomicIndicatorAccess() {
		return pAtomicIndicator;
	}
	
	public ParserRule getAtomicIndicatorRule() {
		return getAtomicIndicatorAccess().getRule();
	}
	
	//CompoundIndicator:
	//	'the' 'swarm' oc=Occurence;
	public CompoundIndicatorElements getCompoundIndicatorAccess() {
		return pCompoundIndicator;
	}
	
	public ParserRule getCompoundIndicatorRule() {
		return getCompoundIndicatorAccess().getRule();
	}
	
	//Scope:
	//	sp=("At any point in time," | "At the end of the mission,") | Condition
	//	//| 'Before' p=AtomicEvent| 'After' p=(AtomicEvent) | 'Between'   p=AtomicEvent 'and' q=AtomicEvent | 'After' p=AtomicEvent 'Untii' q=AtomicEvent | 'at' 'time' t=Time
	//;
	public ScopeElements getScopeAccess() {
		return pScope;
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//AtomicEvent:
	//	'Walls change color';
	public AtomicEventElements getAtomicEventAccess() {
		return pAtomicEvent;
	}
	
	public ParserRule getAtomicEventRule() {
		return getAtomicEventAccess().getRule();
	}
	
	//Occurence:
	//	Reward | Penalty;
	public OccurenceElements getOccurenceAccess() {
		return pOccurence;
	}
	
	public ParserRule getOccurenceRule() {
		return getOccurenceAccess().getRule();
	}
	
	//Penalty:
	//	'gets' 'a' 'penalty' k=Double c=Condition;
	public PenaltyElements getPenaltyAccess() {
		return pPenalty;
	}
	
	public ParserRule getPenaltyRule() {
		return getPenaltyAccess().getRule();
	}
	
	//Reward:
	//	'gets' 'a' 'reward' k=Double c=Condition;
	public RewardElements getRewardAccess() {
		return pReward;
	}
	
	public ParserRule getRewardRule() {
		return getRewardAccess().getRule();
	}
	
	//Condition:
	//	('if' | 'If') 'it' 'is' ('on' | 'outside') r=[Region] | ('if' | 'If') 'there' 'are' 'more' 'than' n=INT 'robots'
	//	('on' | 'outside') r=[Region] ","* | ('if' | 'If') 'it' 'goes' 'from' r=[Region] 'into' nest=[Region];
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Time:
	//	x=Range | 'beggining' 'of' 'the' 'mission' | 'end' 'of' 'the' 'mission';
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//Robot:
	//	'e-puck' | 'foot-boot';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Distribution:
	//	'Uniform' | 'Gaussian' | 'Constant';
	public DistributionElements getDistributionAccess() {
		return pDistribution;
	}
	
	public ParserRule getDistributionRule() {
		return getDistributionAccess().getRule();
	}
	
	//EnvironmentElements:
	//	EnvironmentElement | ElementDescription;
	public EnvironmentElementsElements getEnvironmentElementsAccess() {
		return pEnvironmentElements;
	}
	
	public ParserRule getEnvironmentElementsRule() {
		return getEnvironmentElementsAccess().getRule();
	}
	
	//EnvironmentElement:
	//	Obstacle | Light | Object | Patch | 'A' Region;
	public EnvironmentElementElements getEnvironmentElementAccess() {
		return pEnvironmentElement;
	}
	
	public ParserRule getEnvironmentElementRule() {
		return getEnvironmentElementAccess().getRule();
	}
	
	//ElementDescription:
	//	el='There' 'are' x=Range obj=Element r=ProbabilisticDecription;
	public ElementDescriptionElements getElementDescriptionAccess() {
		return pElementDescription;
	}
	
	public ParserRule getElementDescriptionRule() {
		return getElementDescriptionAccess().getRule();
	}
	
	//Element:
	//	ob=El 'with' 'dimensions' ':' d=Dimension2;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//El:
	//	'objects' | 'obstacles' | 'light' 'sources' | 'patch';
	public ElElements getElAccess() {
		return pEl;
	}
	
	public ParserRule getElRule() {
		return getElAccess().getRule();
	}
	
	//Object:
	//	obj='An' 'object' 'as' 'a' r=Region;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Obstacle:
	//	obs='An' 'obstacle' 'as' 'a' r=Region;
	public ObstacleElements getObstacleAccess() {
		return pObstacle;
	}
	
	public ParserRule getObstacleRule() {
		return getObstacleAccess().getRule();
	}
	
	//Patch:
	//	pt='A' c=Color 'patch' 'as' 'a' r=Region;
	public PatchElements getPatchAccess() {
		return pPatch;
	}
	
	public ParserRule getPatchRule() {
		return getPatchAccess().getRule();
	}
	
	//Light:
	//	l='A' 'light' 'source' 'emitting' 'a' c=Color 'light' 'is' 'placed' 'at' p=Position;
	public LightElements getLightAccess() {
		return pLight;
	}
	
	public ParserRule getLightRule() {
		return getLightAccess().getRule();
	}
	
	//Position:
	//	('center' 'at' | 'reference')? 'point' point=(Coordinate2D | Coordinate3D);
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//Shape2D:
	//	'Circle' | 'Polygon' | 'Triangle' | 'Rectangle' | 'Dodecagon' | 'Hexagon' | 'Square' | 'Region';
	public Shape2DElements getShape2DAccess() {
		return pShape2D;
	}
	
	public ParserRule getShape2DRule() {
		return getShape2DAccess().getRule();
	}
	
	//Shape3D:
	//	'Rectangular cuboid' | 'Cube' | 'Cylinder';
	public Shape3DElements getShape3DAccess() {
		return pShape3D;
	}
	
	public ParserRule getShape3DRule() {
		return getShape3DAccess().getRule();
	}
	
	//Arena:
	//	'The' 'arena' 'is' 'a' s=Region 'surrounded' 'by' 'walls' '.';
	public ArenaElements getArenaAccess() {
		return pArena;
	}
	
	public ParserRule getArenaRule() {
		return getArenaAccess().getRule();
	}
	
	////. 'with' dimensions=Dimension;
	//Color:
	//	'red' | 'yellow' | 'green' | 'gray' | 'black' | 'white';
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	////Region:
	//// 'Circle' | 'Polygon';
	//Region:
	//	colors=Color? shape2d=Shape2D name=ID region=RegionDefinition;
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}
	
	//RegionDefinition:
	//	DefinitionOne | DefinitionTwo | DefinitionThree;
	public RegionDefinitionElements getRegionDefinitionAccess() {
		return pRegionDefinition;
	}
	
	public ParserRule getRegionDefinitionRule() {
		return getRegionDefinitionAccess().getRule();
	}
	
	//DefinitionOne:
	//	('with' referencepoint=Position)? ('and' dimensions=Dimension)?;
	public DefinitionOneElements getDefinitionOneAccess() {
		return pDefinitionOne;
	}
	
	public ParserRule getDefinitionOneRule() {
		return getDefinitionOneAccess().getRule();
	}
	
	//DefinitionTwo:
	//	'defined' 'through' 'the' 'following' 'Vertices' ':' point+=Position (';' point+=Position)*;
	public DefinitionTwoElements getDefinitionTwoAccess() {
		return pDefinitionTwo;
	}
	
	public ParserRule getDefinitionTwoRule() {
		return getDefinitionTwoAccess().getRule();
	}
	
	//DefinitionThree:
	//	'where' ax=Axis 'is' r=Range;
	public DefinitionThreeElements getDefinitionThreeAccess() {
		return pDefinitionThree;
	}
	
	public ParserRule getDefinitionThreeRule() {
		return getDefinitionThreeAccess().getRule();
	}
	
	//Axis:
	//	'x' | 'y';
	public AxisElements getAxisAccess() {
		return pAxis;
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}
	
	////Type: 
	////	CircleD | RectangleD	
	////;
	//Dimension:
	//	Dimension1 | Dimension2 | Dimension3;
	public DimensionElements getDimensionAccess() {
		return pDimension;
	}
	
	public ParserRule getDimensionRule() {
		return getDimensionAccess().getRule();
	}
	
	//Dimension1:
	//	'radius' r=Double m1=Metric ('and' 'height' h=Double m2=Metric)?;
	public Dimension1Elements getDimension1Access() {
		return pDimension1;
	}
	
	public ParserRule getDimension1Rule() {
		return getDimension1Access().getRule();
	}
	
	//Dimension2:
	//	'length' l=Double m3=Metric ',width' w=Double m4=Metric ('and' 'height' h=Double m5=Metric)?;
	public Dimension2Elements getDimension2Access() {
		return pDimension2;
	}
	
	public ParserRule getDimension2Rule() {
		return getDimension2Access().getRule();
	}
	
	//Dimension3:
	//	'side' s=Double m6=Metric;
	public Dimension3Elements getDimension3Access() {
		return pDimension3;
	}
	
	public ParserRule getDimension3Rule() {
		return getDimension3Access().getRule();
	}
	
	////Dimension:
	////CircleD | RectangleD | SquareD
	////;
	////{CircleD} 'radius' r=Double | 
	////{RectangleD} 'length' l=Double ',width' w=Double 'and' 'height' h=Double ; //|
	////types=[CircleD | ]
	////{SquareD} 'side' a=Double;
	////CircleD:
	////	'radius' r=Double
	////;
	////RectangleD:
	////	'length' l=Double ',width' w=Double 'and' 'height' h=Double 
	////;
	//// SquareD:
	//// 	'side' a=Double
	//// ;
	//Coordinate2D:
	//	x=Double ',' y=Double;
	public Coordinate2DElements getCoordinate2DAccess() {
		return pCoordinate2D;
	}
	
	public ParserRule getCoordinate2DRule() {
		return getCoordinate2DAccess().getRule();
	}
	
	//Coordinate3D:
	//	x=Double ',' y=Double ',' z=Double;
	public Coordinate3DElements getCoordinate3DAccess() {
		return pCoordinate3D;
	}
	
	public ParserRule getCoordinate3DRule() {
		return getCoordinate3DAccess().getRule();
	}
	
	//Double:
	//	'-'? INT ('.' INT)?;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//Range:
	//	Upperbound | Lowerbound | Interval | LowerorEqualbound | UpperorEqualbound | ConstantSize;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//ConstantSize:
	//	n=Double;
	public ConstantSizeElements getConstantSizeAccess() {
		return pConstantSize;
	}
	
	public ParserRule getConstantSizeRule() {
		return getConstantSizeAccess().getRule();
	}
	
	//Lowerbound:
	//	'less' 'than' n=Double;
	public LowerboundElements getLowerboundAccess() {
		return pLowerbound;
	}
	
	public ParserRule getLowerboundRule() {
		return getLowerboundAccess().getRule();
	}
	
	//LowerorEqualbound:
	//	'less' 'or' 'equal' 'than' n=Double;
	public LowerorEqualboundElements getLowerorEqualboundAccess() {
		return pLowerorEqualbound;
	}
	
	public ParserRule getLowerorEqualboundRule() {
		return getLowerorEqualboundAccess().getRule();
	}
	
	//Upperbound:
	//	'more' 'than' n=Double;
	public UpperboundElements getUpperboundAccess() {
		return pUpperbound;
	}
	
	public ParserRule getUpperboundRule() {
		return getUpperboundAccess().getRule();
	}
	
	//UpperorEqualbound:
	//	'more' 'or' 'equal' 'than' n=Double;
	public UpperorEqualboundElements getUpperorEqualboundAccess() {
		return pUpperorEqualbound;
	}
	
	public ParserRule getUpperorEqualboundRule() {
		return getUpperorEqualboundAccess().getRule();
	}
	
	////
	//Interval:
	//	n=Double 'to' m=Double;
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
