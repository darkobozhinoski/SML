/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.sml.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import org.eclipse.xtext.naming.IQualifiedNameProvider


import com.google.inject.Inject
import org.xtext.example.sml.sml.Model
import org.xtext.example.sml.sml.Arena
import org.xtext.example.sml.sml.Coordinate2D
import org.xtext.example.sml.sml.Coordinate3D

import org.xtext.example.sml.sml.Dimension
//import org.xtext.example.sml.sml.RectnagleD
import org.xtext.example.sml.sml.Region
import org.xtext.example.sml.sml.Arena
import org.xtext.example.sml.sml.Position

import org.xtext.example.sml.sml.Swarmconf

import org.xtext.example.sml.sml.Light
import org.xtext.example.sml.sml.Obstacle
import org.xtext.example.sml.sml.Object
import org.xtext.example.sml.sml.EnvironmentElement
import org.xtext.example.sml.sml.EnvironmentElements
import org.xtext.example.sml.sml.ProbabilisticDecription
import org.xtext.example.sml.sml.Environment
import org.xtext.example.sml.sml.ElementDescription
import org.xtext.example.sml.sml.MissionObjective
import org.xtext.example.sml.sml.Reward
import org.xtext.example.sml.sml.Indicator
import org.xtext.example.sml.sml.AtomicIndicator
import org.xtext.example.sml.sml.Scope
import org.xtext.example.sml.sml.Occurence
import org.xtext.example.sml.sml.Penalty
import org.xtext.example.sml.sml.Condition
import org.xtext.example.sml.sml.CompoundIndicator
import org.xtext.example.sml.sml.Range
import org.xtext.example.sml.sml.ConstantSize
import org.xtext.example.sml.sml.Interval
import org.xtext.example.sml.sml.Dimension1
import org.xtext.example.sml.sml.Dimension2
import org.xtext.example.sml.sml.Dimension3
import org.xtext.example.sml.sml.RegionDefinition
import org.xtext.example.sml.sml.DefinitionOne
import org.xtext.example.sml.sml.DefinitionTwo
import org.xtext.example.sml.sml.DefinitionThree
import java.util.Random;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SmlGenerator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

    		//	«IF model.env !== null»«model.ms.compile» «ENDIF»
    		//«IF model.sw !== null»«model.sw.compile» «ENDIF»


     val model = resource.contents.head as Model
     var model1 = resource.contents.head as Model
     
     fsa.generateFile('setup.xml', '''
        <?xml version="1.0" ?>
     <argos-configuration>
       <!-- ************* -->
       <!-- * Framework * -->
       <!-- ************* -->
       <!--AGGREGATION ON ONE  SPOT-->
       <framework>
         <experiment length="«model.ms.mt.t.compile»"
                     ticks_per_second="10" random_seed="0"/>
       </framework>
         <!-- ****************** -->
         <!-- * Loop functions * -->
         <!-- ****************** -->
         <loop_functions library="PATH_TO_LIB/libchocolate_mission1_loopfunc.dylib" label="chocolate_mission1_loop_functions">
          <params dist_radius="1.2" number_robots="«model.sw.x.n»" m_min_robots="«IF model.sw.x instanceof Interval»«(model.sw.x as Interval).m» «ENDIF»"/>
         </loop_functions>
       
         <!-- *************** -->
         <!-- * Controllers * -->
         <!-- *************** -->
         <controllers>
       	<!-- TRANSMITTER -->
           <automode_controller id="automode"
                               library="/Users/darko/Documents/GitHub/Automode/AutoMoDe-private/build/src/libautomode.dylib">
             <actuators>
               <epuck_wheels implementation="default" noise_std_dev="0.05"/>
               <epuck_rgb_leds implementation="default" medium="leds"/>
               <epuck_range_and_bearing implementation="medium" medium="rab" data_size="4" range="0.7"/>
             </actuators>
             <sensors>
       		    <epuck_proximity implementation="default" show_rays="false" noise_level="0.05" calibrated="true"/>
               <epuck_range_and_bearing implementation="medium" medium="rab" data_size="4" nois_std_deviation="1.5" loss_probability="0.85" calibrated="true"/>
       		    <epuck_light implementation="default" show_rays="true" noise_level="0.05" calibrated="true"/>
       		    <epuck_ground implementation="rot_z_only" noise_level="0.05" calibrated="true"/>
       		    <epuck_omnidirectional_camera implementation="rot_z_only" medium="leds" show_rays="false"/>
             </sensors>
        <!--  <params fsm-config="--nstates 1 --s0 1" />  -->
       <params
       fsm-config="--nstates 2 --s0 4 --att0 5 --n0 1 --n0x0 0 --c0x0 0 --p0x0 
       1.0 --s1 1 --n1 1 --n1x0 0 --c1x0 5 --p1x0 0.25"/>
           </automode_controller>
         </controllers>
       
         <!-- ********* -->
         <!-- * Arena * -->
         <!-- ********* -->
         <arena size="10, 10, 1" center="0,0,0">
       
         <!-- Change the floor here -->
         <floor id="floor" source="loop_functions" pixels_per_meter="300"/>
	        «IF model.arenas !== null»«model.env.compile» «ENDIF»
	        «IF model.arenas !== null»«model.sw.compile» «ENDIF»
	      			
	  </arena>
	  
	    			<!-- ******************* -->
	    			<!-- * Physics engines * -->
	    			<!-- ******************* -->
	    			<physics_engines>
	      				<dynamics2d id="dyn2d" />
	    			</physics_engines>
	  
	    <!-- ********* -->
	    <!-- * Media * -->
	    <!-- ********* -->
	    <media>
	      <led id="leds" grid_size="1,1,1"/>
	      <range_and_bearing id="ircom"/>
	      <range_and_bearing id="rab"/>
	    </media>
	  
	    <!-- ***************** -->
	    <!-- * Visualization * -->
	    <!-- ***************** -->
	    <visualization>
	     <qt-opengl>
	      </qt-opengl>
	    </visualization>
	  </argos-configuration>
	      		''')
     
     
     
     
     
	}
	
	 def compile(Environment en) 
	       	'''«FOR e: en.environment» 
	       			«IF e instanceof ElementDescription»
	       	        «(e as ElementDescription).compile»
	       	        «ELSEIF e instanceof EnvironmentElement»
	       	        «(e as EnvironmentElement).compile»«ENDIF»
	       	        «ENDFOR»'''
	       
	 def compile(ElementDescription ed)''' <distribute>
	             <position method="«ed.r.dis»" «IF ed.r.dis == "uniform"» min="0,0,0" max="
	             
	             «IF ed.r.k.region instanceof DefinitionOne»«(ed.r.k.region as DefinitionOne).compile(true)» «ENDIF»
	           
	             
	             " />«ELSEIF ed.r.dis  == "Gaussian"» mean="0,0,0" std_dev="360,0,0" />«ENDIF»
	             <orientation method="«ed.r.dis»" «IF ed.r.dis == "uniform"» min="0,0,0" max="«ed.r.k.compile»" />«ELSEIF ed.r.dis  == "Gaussian"» mean="0,0,0" std_dev="360,0,0" />«ENDIF»
	             <entity quantity="«ed.x.n»" max_trials="100">
	                 <box   id="b«Math.random() *100»" size="«ed.obj.d.compile»" '«IF ed.obj !== null» mass="«ed.obj.w»"«ENDIF» movable="«check(ed.obj.ob).toString()»" />
	            </entity>
	           </distribute>  
	         '''
	       
	  def compile(EnvironmentElement en)
	       	'''«IF en instanceof Obstacle»
	       	        «(en as Obstacle).compile»
	       	        «ELSEIF en instanceof Object»
	       	        «(en as Object).compile»
	       	         «ELSEIF en instanceof Light»
	       	          «(en as Light).compile»
	       	        «ENDIF»'''
	       	        
	  
	  

	  
	     
	 def compile(DefinitionOne defone,boolean referencepoint)	  
	  '''«IF referencepoint==true»«defone.referencepoint»
	 	 «ELSE»«defone.dimensions.compile»«ENDIF»'''      
	 
	 
	 
	   def compile(Dimension en) {
	       	'''«IF en instanceof Dimension3»
	       		       	  «(en as Dimension3).compile»
	       		       	   «ELSEIF en instanceof Dimension2»
	       		       	   «(en as Dimension2).compile»
	       		       	   «ELSEIF en instanceof Dimension1»
	       		       	 «(en as Dimension1).compile»
	       		       	   «ENDIF»
	       	   '''
	       }   	     

	 def compile(Arena A) 
	           '''«IF A !== null»<arena size= center=2.0">
	          </arena>«ENDIF»'''
	
	
	 def compile(Range R) 
	 			 '''«IF R instanceof ConstantSize»«R.n»
	 			  «ELSEIF R instanceof Interval»«R.m»«ENDIF»'''
	 			  
	 def compile(Light l)
	      	'''<light id="light«Math.random() *100»" position="«l.p.compile»" orientation="0,0,0" color="«l.c»" intensity="0.0" medium="leds"/>
	          '''
	
	
	
	 def compile(Position pt) '''«IF pt.point instanceof Coordinate2D»  «(pt.point as Coordinate2D).compile» 
	 							«ELSEIF pt.point instanceof Coordinate3D» «(pt.point as Coordinate3D).compile» «ENDIF»'''			  
	 			  

	
			
def check(String en){
	  	if (en.contains("objects")) {return true;}
	  	else if (en.contains("obstacles")) {return false;}
	  	
	  }
	

	
  def compile(Dimension1 dm1)
  '''«dm1.r» «IF dm1.h !==null»,«dm1.h» «ENDIF»'''
	
	
	
def compile(Dimension2 dm2)
 	'''«dm2.l»,«dm2.w»,«dm2.h»'''
	
	
def compile(Dimension3 dm3)
 	'''«dm3.s»'''
	
	 def compile(Swarmconf sw)''' <distribute>
	             <position method="«sw.pr.dis»" «IF sw.pr.dis == "Uniform"» min="0,0,0" max="«sw.pr.k.compile»" />«ELSEIF sw.pr.dis  == "gaussian"» mean="0,0,0" std_dev="360,0,0" />«ENDIF»
	             <orientation method="«sw.pr.dis»" «IF sw.pr.dis == "Uniform"» min="0,0,0" max="«sw.pr.k.compile»" />«ELSEIF sw.pr.dis  == "gaussian"» mean="0,0,0" std_dev="360,0,0" />«ENDIF»
	             <entity quantity="«sw.x.n»" max_trials="100">
	               <«sw.r» id="«sw.r.toString»">
	                 <controller «IF sw.r == "foot-boot"» config="fdc"«ELSEIF sw.r  == "e-puck"» config="automode"«ENDIF» />
	               </«sw.r» >
	            </entity>
	           </distribute>  
	         '''		 
	
		def compile(Coordinate2D pt)
	 	''' «pt.x»,«pt.y»'''
	 	 def compile(Coordinate3D pt)
		'''«pt.x»,«pt.y»,«pt.z»'''
		
		}
		

		
      