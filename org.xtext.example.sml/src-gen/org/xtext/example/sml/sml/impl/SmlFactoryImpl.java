/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.sml.sml.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.sml.sml.Arena;
import org.xtext.example.sml.sml.Circle;
import org.xtext.example.sml.sml.CircleD;
import org.xtext.example.sml.sml.ConstantSize;
import org.xtext.example.sml.sml.Coordinate;
import org.xtext.example.sml.sml.Dimension;
import org.xtext.example.sml.sml.ElementDescription;
import org.xtext.example.sml.sml.Environment;
import org.xtext.example.sml.sml.EnvironmentElement;
import org.xtext.example.sml.sml.EnvironmentElements;
import org.xtext.example.sml.sml.Interval;
import org.xtext.example.sml.sml.Light;
import org.xtext.example.sml.sml.Lowerbound;
import org.xtext.example.sml.sml.LowerorEqualbound;
import org.xtext.example.sml.sml.Model;
import org.xtext.example.sml.sml.Obstacle;
import org.xtext.example.sml.sml.PointD;
import org.xtext.example.sml.sml.Position;
import org.xtext.example.sml.sml.ProbabilisticDecription;
import org.xtext.example.sml.sml.Range;
import org.xtext.example.sml.sml.Rectangle;
import org.xtext.example.sml.sml.RectangleD;
import org.xtext.example.sml.sml.Region;
import org.xtext.example.sml.sml.SmlFactory;
import org.xtext.example.sml.sml.SmlPackage;
import org.xtext.example.sml.sml.Swarmconf;
import org.xtext.example.sml.sml.Upperbound;
import org.xtext.example.sml.sml.UpperorEqualbound;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SmlFactoryImpl extends EFactoryImpl implements SmlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SmlFactory init()
  {
    try
    {
      SmlFactory theSmlFactory = (SmlFactory)EPackage.Registry.INSTANCE.getEFactory(SmlPackage.eNS_URI);
      if (theSmlFactory != null)
      {
        return theSmlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SmlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SmlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SmlPackage.MODEL: return createModel();
      case SmlPackage.ENVIRONMENT: return createEnvironment();
      case SmlPackage.PROBABILISTIC_DECRIPTION: return createProbabilisticDecription();
      case SmlPackage.SWARMCONF: return createSwarmconf();
      case SmlPackage.ENVIRONMENT_ELEMENTS: return createEnvironmentElements();
      case SmlPackage.ENVIRONMENT_ELEMENT: return createEnvironmentElement();
      case SmlPackage.ELEMENT_DESCRIPTION: return createElementDescription();
      case SmlPackage.OBJECT: return createObject();
      case SmlPackage.OBSTACLE: return createObstacle();
      case SmlPackage.LIGHT: return createLight();
      case SmlPackage.POSITION: return createPosition();
      case SmlPackage.ARENA: return createArena();
      case SmlPackage.REGION: return createRegion();
      case SmlPackage.DIMENSION: return createDimension();
      case SmlPackage.CIRCLE_D: return createCircleD();
      case SmlPackage.RECTANGLE_D: return createRectangleD();
      case SmlPackage.COORDINATE: return createCoordinate();
      case SmlPackage.RANGE: return createRange();
      case SmlPackage.CONSTANT_SIZE: return createConstantSize();
      case SmlPackage.LOWERBOUND: return createLowerbound();
      case SmlPackage.LOWEROR_EQUALBOUND: return createLowerorEqualbound();
      case SmlPackage.UPPERBOUND: return createUpperbound();
      case SmlPackage.UPPEROR_EQUALBOUND: return createUpperorEqualbound();
      case SmlPackage.INTERVAL: return createInterval();
      case SmlPackage.CIRCLE: return createCircle();
      case SmlPackage.RECTANGLE: return createRectangle();
      case SmlPackage.POINT_D: return createPointD();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Environment createEnvironment()
  {
    EnvironmentImpl environment = new EnvironmentImpl();
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProbabilisticDecription createProbabilisticDecription()
  {
    ProbabilisticDecriptionImpl probabilisticDecription = new ProbabilisticDecriptionImpl();
    return probabilisticDecription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Swarmconf createSwarmconf()
  {
    SwarmconfImpl swarmconf = new SwarmconfImpl();
    return swarmconf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvironmentElements createEnvironmentElements()
  {
    EnvironmentElementsImpl environmentElements = new EnvironmentElementsImpl();
    return environmentElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnvironmentElement createEnvironmentElement()
  {
    EnvironmentElementImpl environmentElement = new EnvironmentElementImpl();
    return environmentElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementDescription createElementDescription()
  {
    ElementDescriptionImpl elementDescription = new ElementDescriptionImpl();
    return elementDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.sml.sml.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Obstacle createObstacle()
  {
    ObstacleImpl obstacle = new ObstacleImpl();
    return obstacle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Light createLight()
  {
    LightImpl light = new LightImpl();
    return light;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Position createPosition()
  {
    PositionImpl position = new PositionImpl();
    return position;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arena createArena()
  {
    ArenaImpl arena = new ArenaImpl();
    return arena;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Region createRegion()
  {
    RegionImpl region = new RegionImpl();
    return region;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dimension createDimension()
  {
    DimensionImpl dimension = new DimensionImpl();
    return dimension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CircleD createCircleD()
  {
    CircleDImpl circleD = new CircleDImpl();
    return circleD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RectangleD createRectangleD()
  {
    RectangleDImpl rectangleD = new RectangleDImpl();
    return rectangleD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Coordinate createCoordinate()
  {
    CoordinateImpl coordinate = new CoordinateImpl();
    return coordinate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantSize createConstantSize()
  {
    ConstantSizeImpl constantSize = new ConstantSizeImpl();
    return constantSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lowerbound createLowerbound()
  {
    LowerboundImpl lowerbound = new LowerboundImpl();
    return lowerbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LowerorEqualbound createLowerorEqualbound()
  {
    LowerorEqualboundImpl lowerorEqualbound = new LowerorEqualboundImpl();
    return lowerorEqualbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Upperbound createUpperbound()
  {
    UpperboundImpl upperbound = new UpperboundImpl();
    return upperbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpperorEqualbound createUpperorEqualbound()
  {
    UpperorEqualboundImpl upperorEqualbound = new UpperorEqualboundImpl();
    return upperorEqualbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interval createInterval()
  {
    IntervalImpl interval = new IntervalImpl();
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Circle createCircle()
  {
    CircleImpl circle = new CircleImpl();
    return circle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rectangle createRectangle()
  {
    RectangleImpl rectangle = new RectangleImpl();
    return rectangle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PointD createPointD()
  {
    PointDImpl pointD = new PointDImpl();
    return pointD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SmlPackage getSmlPackage()
  {
    return (SmlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SmlPackage getPackage()
  {
    return SmlPackage.eINSTANCE;
  }

} //SmlFactoryImpl
