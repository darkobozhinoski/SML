/*
 * generated by Xtext 2.16.0
 */
grammar InternalSml;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.sml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.sml.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.sml.services.SmlGrammarAccess;

}

@parser::members {

 	private SmlGrammarAccess grammarAccess;

    public InternalSmlParser(TokenStream input, SmlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SmlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getArenasArenaParserRuleCall_0_0());
				}
				lv_arenas_0_0=ruleArena
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"arenas",
						lv_arenas_0_0,
						"org.xtext.example.sml.Sml.Arena");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getEnvEnvironmentParserRuleCall_1_0());
				}
				lv_env_1_0=ruleEnvironment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"env",
						lv_env_1_0,
						"org.xtext.example.sml.Sml.Environment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSwSwarmconfParserRuleCall_2_0());
				}
				lv_sw_2_0=ruleSwarmconf
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"sw",
						lv_sw_2_0,
						"org.xtext.example.sml.Sml.Swarmconf");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getObMissionObjectiveParserRuleCall_3_0());
				}
				lv_ob_3_0=ruleMissionObjective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"ob",
						lv_ob_3_0,
						"org.xtext.example.sml.Sml.MissionObjective");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnvironment
entryRuleEnvironment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnvironmentRule()); }
	iv_ruleEnvironment=ruleEnvironment
	{ $current=$iv_ruleEnvironment.current; }
	EOF;

// Rule Environment
ruleEnvironment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='The'
			{
				newLeafNode(otherlv_0, grammarAccess.getEnvironmentAccess().getTheKeyword_0_0());
			}
			otherlv_1='arena'
			{
				newLeafNode(otherlv_1, grammarAccess.getEnvironmentAccess().getArenaKeyword_0_1());
			}
			otherlv_2='contains'
			{
				newLeafNode(otherlv_2, grammarAccess.getEnvironmentAccess().getContainsKeyword_0_2());
			}
			otherlv_3='the'
			{
				newLeafNode(otherlv_3, grammarAccess.getEnvironmentAccess().getTheKeyword_0_3());
			}
			otherlv_4='following'
			{
				newLeafNode(otherlv_4, grammarAccess.getEnvironmentAccess().getFollowingKeyword_0_4());
			}
			otherlv_5='elements'
			{
				newLeafNode(otherlv_5, grammarAccess.getEnvironmentAccess().getElementsKeyword_0_5());
			}
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getEnvironmentAccess().getColonKeyword_0_6());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getEnvironmentAccess().getEnvironmentEnvironmentElementsParserRuleCall_1_0());
				}
				lv_environment_7_0=ruleEnvironmentElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnvironmentRule());
					}
					add(
						$current,
						"environment",
						lv_environment_7_0,
						"org.xtext.example.sml.Sml.EnvironmentElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleProbabilisticDecription
entryRuleProbabilisticDecription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProbabilisticDecriptionRule()); }
	iv_ruleProbabilisticDecription=ruleProbabilisticDecription
	{ $current=$iv_ruleProbabilisticDecription.current; }
	EOF;

// Rule ProbabilisticDecription
ruleProbabilisticDecription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='distributed'
		{
			newLeafNode(otherlv_0, grammarAccess.getProbabilisticDecriptionAccess().getDistributedKeyword_0());
		}
		otherlv_1='with'
		{
			newLeafNode(otherlv_1, grammarAccess.getProbabilisticDecriptionAccess().getWithKeyword_1());
		}
		otherlv_2='a'
		{
			newLeafNode(otherlv_2, grammarAccess.getProbabilisticDecriptionAccess().getAKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProbabilisticDecriptionAccess().getDisDistributionParserRuleCall_3_0());
				}
				lv_dis_3_0=ruleDistribution
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProbabilisticDecriptionRule());
					}
					set(
						$current,
						"dis",
						lv_dis_3_0,
						"org.xtext.example.sml.Sml.Distribution");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='distribution'
		{
			newLeafNode(otherlv_4, grammarAccess.getProbabilisticDecriptionAccess().getDistributionKeyword_4());
		}
		otherlv_5='in'
		{
			newLeafNode(otherlv_5, grammarAccess.getProbabilisticDecriptionAccess().getInKeyword_5());
		}
		otherlv_6='a'
		{
			newLeafNode(otherlv_6, grammarAccess.getProbabilisticDecriptionAccess().getAKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProbabilisticDecriptionAccess().getKRegionParserRuleCall_7_0());
				}
				lv_k_7_0=ruleRegion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProbabilisticDecriptionRule());
					}
					set(
						$current,
						"k",
						lv_k_7_0,
						"org.xtext.example.sml.Sml.Region");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSwarmconf
entryRuleSwarmconf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwarmconfRule()); }
	iv_ruleSwarmconf=ruleSwarmconf
	{ $current=$iv_ruleSwarmconf.current; }
	EOF;

// Rule Swarmconf
ruleSwarmconf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='The'
		{
			newLeafNode(otherlv_0, grammarAccess.getSwarmconfAccess().getTheKeyword_0());
		}
		otherlv_1='robot'
		{
			newLeafNode(otherlv_1, grammarAccess.getSwarmconfAccess().getRobotKeyword_1());
		}
		otherlv_2='swarm'
		{
			newLeafNode(otherlv_2, grammarAccess.getSwarmconfAccess().getSwarmKeyword_2());
		}
		otherlv_3='consists'
		{
			newLeafNode(otherlv_3, grammarAccess.getSwarmconfAccess().getConsistsKeyword_3());
		}
		otherlv_4='of'
		{
			newLeafNode(otherlv_4, grammarAccess.getSwarmconfAccess().getOfKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwarmconfAccess().getXRangeParserRuleCall_5_0());
				}
				lv_x_5_0=ruleRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwarmconfRule());
					}
					set(
						$current,
						"x",
						lv_x_5_0,
						"org.xtext.example.sml.Sml.Range");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSwarmconfAccess().getRRobotParserRuleCall_6_0());
				}
				lv_r_6_0=ruleRobot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwarmconfRule());
					}
					set(
						$current,
						"r",
						lv_r_6_0,
						"org.xtext.example.sml.Sml.Robot");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSwarmconfAccess().getPrProbabilisticDecriptionParserRuleCall_7_0());
				}
				lv_pr_7_0=ruleProbabilisticDecription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwarmconfRule());
					}
					set(
						$current,
						"pr",
						lv_pr_7_0,
						"org.xtext.example.sml.Sml.ProbabilisticDecription");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='aggregate'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getAggregateKeyword_0());
		}
		otherlv_1='on'
		{
			newLeafNode(otherlv_1, grammarAccess.getTaskAccess().getOnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getRRegionParserRuleCall_2_0());
				}
				lv_r_2_0=ruleRegion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"r",
						lv_r_2_0,
						"org.xtext.example.sml.Sml.Region");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMetric
entryRuleMetric returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMetricRule()); }
	iv_ruleMetric=ruleMetric
	{ $current=$iv_ruleMetric.current.getText(); }
	EOF;

// Rule Metric
ruleMetric returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='seconds'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMetricAccess().getSecondsKeyword_0());
		}
		    |
		kw='steps'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMetricAccess().getStepsKeyword_1());
		}
	)
;

// Entry rule entryRuleMissionObjective
entryRuleMissionObjective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMissionObjectiveRule()); }
	iv_ruleMissionObjective=ruleMissionObjective
	{ $current=$iv_ruleMissionObjective.current; }
	EOF;

// Rule MissionObjective
ruleMissionObjective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='The'
		{
			newLeafNode(otherlv_0, grammarAccess.getMissionObjectiveAccess().getTheKeyword_0());
		}
		otherlv_1='performance'
		{
			newLeafNode(otherlv_1, grammarAccess.getMissionObjectiveAccess().getPerformanceKeyword_1());
		}
		otherlv_2='measure'
		{
			newLeafNode(otherlv_2, grammarAccess.getMissionObjectiveAccess().getMeasureKeyword_2());
		}
		otherlv_3='is'
		{
			newLeafNode(otherlv_3, grammarAccess.getMissionObjectiveAccess().getIsKeyword_3());
		}
		otherlv_4='defined'
		{
			newLeafNode(otherlv_4, grammarAccess.getMissionObjectiveAccess().getDefinedKeyword_4());
		}
		otherlv_5='in'
		{
			newLeafNode(otherlv_5, grammarAccess.getMissionObjectiveAccess().getInKeyword_5());
		}
		otherlv_6='terms'
		{
			newLeafNode(otherlv_6, grammarAccess.getMissionObjectiveAccess().getTermsKeyword_6());
		}
		otherlv_7='of'
		{
			newLeafNode(otherlv_7, grammarAccess.getMissionObjectiveAccess().getOfKeyword_7());
		}
		otherlv_8='an'
		{
			newLeafNode(otherlv_8, grammarAccess.getMissionObjectiveAccess().getAnKeyword_8());
		}
		otherlv_9='objective'
		{
			newLeafNode(otherlv_9, grammarAccess.getMissionObjectiveAccess().getObjectiveKeyword_9());
		}
		otherlv_10='function'
		{
			newLeafNode(otherlv_10, grammarAccess.getMissionObjectiveAccess().getFunctionKeyword_10());
		}
		otherlv_11='that'
		{
			newLeafNode(otherlv_11, grammarAccess.getMissionObjectiveAccess().getThatKeyword_11());
		}
		otherlv_12='maximizes'
		{
			newLeafNode(otherlv_12, grammarAccess.getMissionObjectiveAccess().getMaximizesKeyword_12());
		}
		otherlv_13='the'
		{
			newLeafNode(otherlv_13, grammarAccess.getMissionObjectiveAccess().getTheKeyword_13());
		}
		otherlv_14='following'
		{
			newLeafNode(otherlv_14, grammarAccess.getMissionObjectiveAccess().getFollowingKeyword_14());
		}
		otherlv_15='score'
		{
			newLeafNode(otherlv_15, grammarAccess.getMissionObjectiveAccess().getScoreKeyword_15());
		}
		otherlv_16=':'
		{
			newLeafNode(otherlv_16, grammarAccess.getMissionObjectiveAccess().getColonKeyword_16());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMissionObjectiveAccess().getInIndicatorParserRuleCall_17_0());
				}
				lv_in_17_0=ruleIndicator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMissionObjectiveRule());
					}
					add(
						$current,
						"in",
						lv_in_17_0,
						"org.xtext.example.sml.Sml.Indicator");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleIndicator
entryRuleIndicator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndicatorRule()); }
	iv_ruleIndicator=ruleIndicator
	{ $current=$iv_ruleIndicator.current; }
	EOF;

// Rule Indicator
ruleIndicator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIndicatorAccess().getSpScopeParserRuleCall_0_0());
				}
				lv_sp_0_0=ruleScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndicatorRule());
					}
					set(
						$current,
						"sp",
						lv_sp_0_0,
						"org.xtext.example.sml.Sml.Scope");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIndicatorAccess().getOcAtomicIndicatorParserRuleCall_1_0_0());
					}
					lv_oc_1_1=ruleAtomicIndicator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIndicatorRule());
						}
						set(
							$current,
							"oc",
							lv_oc_1_1,
							"org.xtext.example.sml.Sml.AtomicIndicator");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getIndicatorAccess().getOcCompoundIndicatorParserRuleCall_1_0_1());
					}
					lv_oc_1_2=ruleCompoundIndicator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIndicatorRule());
						}
						set(
							$current,
							"oc",
							lv_oc_1_2,
							"org.xtext.example.sml.Sml.CompoundIndicator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAtomicIndicator
entryRuleAtomicIndicator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicIndicatorRule()); }
	iv_ruleAtomicIndicator=ruleAtomicIndicator
	{ $current=$iv_ruleAtomicIndicator.current; }
	EOF;

// Rule AtomicIndicator
ruleAtomicIndicator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='each'
		{
			newLeafNode(otherlv_0, grammarAccess.getAtomicIndicatorAccess().getEachKeyword_0());
		}
		otherlv_1='robot'
		{
			newLeafNode(otherlv_1, grammarAccess.getAtomicIndicatorAccess().getRobotKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomicIndicatorAccess().getOcOccurenceParserRuleCall_2_0());
				}
				lv_oc_2_0=ruleOccurence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomicIndicatorRule());
					}
					set(
						$current,
						"oc",
						lv_oc_2_0,
						"org.xtext.example.sml.Sml.Occurence");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCompoundIndicator
entryRuleCompoundIndicator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundIndicatorRule()); }
	iv_ruleCompoundIndicator=ruleCompoundIndicator
	{ $current=$iv_ruleCompoundIndicator.current; }
	EOF;

// Rule CompoundIndicator
ruleCompoundIndicator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='the'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompoundIndicatorAccess().getTheKeyword_0());
		}
		otherlv_1='swarm'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompoundIndicatorAccess().getSwarmKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundIndicatorAccess().getOcOccurenceParserRuleCall_2_0());
				}
				lv_oc_2_0=ruleOccurence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundIndicatorRule());
					}
					set(
						$current,
						"oc",
						lv_oc_2_0,
						"org.xtext.example.sml.Sml.Occurence");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScopeRule()); }
	iv_ruleScope=ruleScope
	{ $current=$iv_ruleScope.current; }
	EOF;

// Rule Scope
ruleScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_sp_0_1='At any point of time'
				{
					newLeafNode(lv_sp_0_1, grammarAccess.getScopeAccess().getSpAtAnyPointOfTimeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScopeRule());
					}
					setWithLastConsumed($current, "sp", lv_sp_0_1, null);
				}
				    |
				lv_sp_0_2='At the end of the mission'
				{
					newLeafNode(lv_sp_0_2, grammarAccess.getScopeAccess().getSpAtTheEndOfTheMissionKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScopeRule());
					}
					setWithLastConsumed($current, "sp", lv_sp_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleOccurence
entryRuleOccurence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOccurenceRule()); }
	iv_ruleOccurence=ruleOccurence
	{ $current=$iv_ruleOccurence.current; }
	EOF;

// Rule Occurence
ruleOccurence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOccurenceAccess().getRewardParserRuleCall_0());
		}
		this_Reward_0=ruleReward
		{
			$current = $this_Reward_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOccurenceAccess().getPenaltyParserRuleCall_1());
		}
		this_Penalty_1=rulePenalty
		{
			$current = $this_Penalty_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePenalty
entryRulePenalty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPenaltyRule()); }
	iv_rulePenalty=rulePenalty
	{ $current=$iv_rulePenalty.current; }
	EOF;

// Rule Penalty
rulePenalty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='gets'
		{
			newLeafNode(otherlv_0, grammarAccess.getPenaltyAccess().getGetsKeyword_0());
		}
		otherlv_1='a'
		{
			newLeafNode(otherlv_1, grammarAccess.getPenaltyAccess().getAKeyword_1());
		}
		otherlv_2='penalty'
		{
			newLeafNode(otherlv_2, grammarAccess.getPenaltyAccess().getPenaltyKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPenaltyAccess().getKDoubleParserRuleCall_3_0());
				}
				lv_k_3_0=ruleDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPenaltyRule());
					}
					set(
						$current,
						"k",
						lv_k_3_0,
						"org.xtext.example.sml.Sml.Double");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPenaltyAccess().getCConditionParserRuleCall_4_0());
				}
				lv_c_4_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPenaltyRule());
					}
					set(
						$current,
						"c",
						lv_c_4_0,
						"org.xtext.example.sml.Sml.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReward
entryRuleReward returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRewardRule()); }
	iv_ruleReward=ruleReward
	{ $current=$iv_ruleReward.current; }
	EOF;

// Rule Reward
ruleReward returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='gets'
		{
			newLeafNode(otherlv_0, grammarAccess.getRewardAccess().getGetsKeyword_0());
		}
		otherlv_1='a'
		{
			newLeafNode(otherlv_1, grammarAccess.getRewardAccess().getAKeyword_1());
		}
		otherlv_2='reward'
		{
			newLeafNode(otherlv_2, grammarAccess.getRewardAccess().getRewardKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRewardAccess().getKDoubleParserRuleCall_3_0());
				}
				lv_k_3_0=ruleDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRewardRule());
					}
					set(
						$current,
						"k",
						lv_k_3_0,
						"org.xtext.example.sml.Sml.Double");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRewardAccess().getCConditionParserRuleCall_4_0());
				}
				lv_c_4_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRewardRule());
					}
					set(
						$current,
						"c",
						lv_c_4_0,
						"org.xtext.example.sml.Sml.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='if'
			{
				newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getIfKeyword_0_0());
			}
			otherlv_1='it'
			{
				newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getItKeyword_0_1());
			}
			otherlv_2='is'
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getIsKeyword_0_2());
			}
			otherlv_3='on'
			{
				newLeafNode(otherlv_3, grammarAccess.getConditionAccess().getOnKeyword_0_3());
			}
			otherlv_4='the'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionAccess().getTheKeyword_0_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getRRegionParserRuleCall_0_5_0());
					}
					lv_r_5_0=ruleRegion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"r",
							lv_r_5_0,
							"org.xtext.example.sml.Sml.Region");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_6='if'
			{
				newLeafNode(otherlv_6, grammarAccess.getConditionAccess().getIfKeyword_1_0());
			}
			otherlv_7='there'
			{
				newLeafNode(otherlv_7, grammarAccess.getConditionAccess().getThereKeyword_1_1());
			}
			otherlv_8='are'
			{
				newLeafNode(otherlv_8, grammarAccess.getConditionAccess().getAreKeyword_1_2());
			}
			otherlv_9='more'
			{
				newLeafNode(otherlv_9, grammarAccess.getConditionAccess().getMoreKeyword_1_3());
			}
			otherlv_10='than'
			{
				newLeafNode(otherlv_10, grammarAccess.getConditionAccess().getThanKeyword_1_4());
			}
			(
				(
					lv_n_11_0=RULE_INT
					{
						newLeafNode(lv_n_11_0, grammarAccess.getConditionAccess().getNINTTerminalRuleCall_1_5_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed(
							$current,
							"n",
							lv_n_11_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_12='robots'
			{
				newLeafNode(otherlv_12, grammarAccess.getConditionAccess().getRobotsKeyword_1_6());
			}
			otherlv_13='on'
			{
				newLeafNode(otherlv_13, grammarAccess.getConditionAccess().getOnKeyword_1_7());
			}
			otherlv_14='the'
			{
				newLeafNode(otherlv_14, grammarAccess.getConditionAccess().getTheKeyword_1_8());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getRRegionParserRuleCall_1_9_0());
					}
					lv_r_15_0=ruleRegion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"r",
							lv_r_15_0,
							"org.xtext.example.sml.Sml.Region");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleRobot
entryRuleRobot returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	iv_ruleRobot=ruleRobot
	{ $current=$iv_ruleRobot.current.getText(); }
	EOF;

// Rule Robot
ruleRobot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='e-puck'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRobotAccess().getEPuckKeyword_0());
		}
		    |
		kw='foot-boot'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRobotAccess().getFootBootKeyword_1());
		}
	)
;

// Entry rule entryRuleDistribution
entryRuleDistribution returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDistributionRule()); }
	iv_ruleDistribution=ruleDistribution
	{ $current=$iv_ruleDistribution.current.getText(); }
	EOF;

// Rule Distribution
ruleDistribution returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='uniform'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDistributionAccess().getUniformKeyword_0());
		}
		    |
		kw='gaussian'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDistributionAccess().getGaussianKeyword_1());
		}
		    |
		kw='constant'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDistributionAccess().getConstantKeyword_2());
		}
	)
;

// Entry rule entryRuleEnvironmentElements
entryRuleEnvironmentElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnvironmentElementsRule()); }
	iv_ruleEnvironmentElements=ruleEnvironmentElements
	{ $current=$iv_ruleEnvironmentElements.current; }
	EOF;

// Rule EnvironmentElements
ruleEnvironmentElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEnvironmentElementsAccess().getEnvironmentElementParserRuleCall_0());
		}
		this_EnvironmentElement_0=ruleEnvironmentElement
		{
			$current = $this_EnvironmentElement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEnvironmentElementsAccess().getElementDescriptionParserRuleCall_1());
		}
		this_ElementDescription_1=ruleElementDescription
		{
			$current = $this_ElementDescription_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnvironmentElement
entryRuleEnvironmentElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnvironmentElementRule()); }
	iv_ruleEnvironmentElement=ruleEnvironmentElement
	{ $current=$iv_ruleEnvironmentElement.current; }
	EOF;

// Rule EnvironmentElement
ruleEnvironmentElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEnvironmentElementAccess().getObstacleParserRuleCall_0());
		}
		this_Obstacle_0=ruleObstacle
		{
			$current = $this_Obstacle_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEnvironmentElementAccess().getLightParserRuleCall_1());
		}
		this_Light_1=ruleLight
		{
			$current = $this_Light_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEnvironmentElementAccess().getObjectParserRuleCall_2());
		}
		this_Object_2=ruleObject
		{
			$current = $this_Object_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleElementDescription
entryRuleElementDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementDescriptionRule()); }
	iv_ruleElementDescription=ruleElementDescription
	{ $current=$iv_ruleElementDescription.current; }
	EOF;

// Rule ElementDescription
ruleElementDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_el_0_0='There'
				{
					newLeafNode(lv_el_0_0, grammarAccess.getElementDescriptionAccess().getElThereKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementDescriptionRule());
					}
					setWithLastConsumed($current, "el", lv_el_0_0, "There");
				}
			)
		)
		otherlv_1='are'
		{
			newLeafNode(otherlv_1, grammarAccess.getElementDescriptionAccess().getAreKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElementDescriptionAccess().getXRangeParserRuleCall_2_0());
				}
				lv_x_2_0=ruleRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementDescriptionRule());
					}
					set(
						$current,
						"x",
						lv_x_2_0,
						"org.xtext.example.sml.Sml.Range");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElementDescriptionAccess().getObjElementParserRuleCall_3_0());
				}
				lv_obj_3_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementDescriptionRule());
					}
					set(
						$current,
						"obj",
						lv_obj_3_0,
						"org.xtext.example.sml.Sml.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElementDescriptionAccess().getRProbabilisticDecriptionParserRuleCall_4_0());
				}
				lv_r_4_0=ruleProbabilisticDecription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementDescriptionRule());
					}
					set(
						$current,
						"r",
						lv_r_4_0,
						"org.xtext.example.sml.Sml.ProbabilisticDecription");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current.getText(); }
	EOF;

// Rule Element
ruleElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='objects'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getElementAccess().getObjectsKeyword_0());
		}
		    |
		kw='obstacles'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getElementAccess().getObstaclesKeyword_1());
		}
		    |
		(
			kw='light'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getElementAccess().getLightKeyword_2_0());
			}
			kw='sources'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getElementAccess().getSourcesKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_obj_0_0='An'
				{
					newLeafNode(lv_obj_0_0, grammarAccess.getObjectAccess().getObjAnKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectRule());
					}
					setWithLastConsumed($current, "obj", lv_obj_0_0, "An");
				}
			)
		)
		otherlv_1='object'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectAccess().getObjectKeyword_1());
		}
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getObjectAccess().getAsKeyword_2());
		}
		otherlv_3='a'
		{
			newLeafNode(otherlv_3, grammarAccess.getObjectAccess().getAKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectAccess().getRRegionParserRuleCall_4_0());
				}
				lv_r_4_0=ruleRegion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectRule());
					}
					set(
						$current,
						"r",
						lv_r_4_0,
						"org.xtext.example.sml.Sml.Region");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleObstacle
entryRuleObstacle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObstacleRule()); }
	iv_ruleObstacle=ruleObstacle
	{ $current=$iv_ruleObstacle.current; }
	EOF;

// Rule Obstacle
ruleObstacle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_obs_0_0='An'
				{
					newLeafNode(lv_obs_0_0, grammarAccess.getObstacleAccess().getObsAnKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObstacleRule());
					}
					setWithLastConsumed($current, "obs", lv_obs_0_0, "An");
				}
			)
		)
		otherlv_1='obstacle'
		{
			newLeafNode(otherlv_1, grammarAccess.getObstacleAccess().getObstacleKeyword_1());
		}
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getObstacleAccess().getAsKeyword_2());
		}
		otherlv_3='a'
		{
			newLeafNode(otherlv_3, grammarAccess.getObstacleAccess().getAKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObstacleAccess().getRRegionParserRuleCall_4_0());
				}
				lv_r_4_0=ruleRegion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObstacleRule());
					}
					set(
						$current,
						"r",
						lv_r_4_0,
						"org.xtext.example.sml.Sml.Region");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLight
entryRuleLight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLightRule()); }
	iv_ruleLight=ruleLight
	{ $current=$iv_ruleLight.current; }
	EOF;

// Rule Light
ruleLight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_l_0_0='A'
				{
					newLeafNode(lv_l_0_0, grammarAccess.getLightAccess().getLAKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLightRule());
					}
					setWithLastConsumed($current, "l", lv_l_0_0, "A");
				}
			)
		)
		otherlv_1='light'
		{
			newLeafNode(otherlv_1, grammarAccess.getLightAccess().getLightKeyword_1());
		}
		otherlv_2='source'
		{
			newLeafNode(otherlv_2, grammarAccess.getLightAccess().getSourceKeyword_2());
		}
		otherlv_3='emitting'
		{
			newLeafNode(otherlv_3, grammarAccess.getLightAccess().getEmittingKeyword_3());
		}
		otherlv_4='a'
		{
			newLeafNode(otherlv_4, grammarAccess.getLightAccess().getAKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLightAccess().getCColorParserRuleCall_5_0());
				}
				lv_c_5_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLightRule());
					}
					set(
						$current,
						"c",
						lv_c_5_0,
						"org.xtext.example.sml.Sml.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='light'
		{
			newLeafNode(otherlv_6, grammarAccess.getLightAccess().getLightKeyword_6());
		}
		otherlv_7='is'
		{
			newLeafNode(otherlv_7, grammarAccess.getLightAccess().getIsKeyword_7());
		}
		otherlv_8='placed'
		{
			newLeafNode(otherlv_8, grammarAccess.getLightAccess().getPlacedKeyword_8());
		}
		otherlv_9='in'
		{
			newLeafNode(otherlv_9, grammarAccess.getLightAccess().getInKeyword_9());
		}
		otherlv_10='a'
		{
			newLeafNode(otherlv_10, grammarAccess.getLightAccess().getAKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLightAccess().getPPositionParserRuleCall_11_0());
				}
				lv_p_11_0=rulePosition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLightRule());
					}
					set(
						$current,
						"p",
						lv_p_11_0,
						"org.xtext.example.sml.Sml.Position");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePosition
entryRulePosition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositionRule()); }
	iv_rulePosition=rulePosition
	{ $current=$iv_rulePosition.current; }
	EOF;

// Rule Position
rulePosition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPositionAccess().getCircleAction_0_0(),
						$current);
				}
			)
			otherlv_1='center'
			{
				newLeafNode(otherlv_1, grammarAccess.getPositionAccess().getCenterKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPositionAccess().getPointCoordinateParserRuleCall_0_2_0());
					}
					lv_point_2_0=ruleCoordinate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositionRule());
						}
						set(
							$current,
							"point",
							lv_point_2_0,
							"org.xtext.example.sml.Sml.Coordinate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPositionAccess().getRectangleAction_1_0(),
						$current);
				}
			)
			otherlv_4='reference point'
			{
				newLeafNode(otherlv_4, grammarAccess.getPositionAccess().getReferencePointKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPositionAccess().getPointCoordinateParserRuleCall_1_2_0());
					}
					lv_point_5_0=ruleCoordinate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositionRule());
						}
						set(
							$current,
							"point",
							lv_point_5_0,
							"org.xtext.example.sml.Sml.Coordinate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPositionAccess().getPointDAction_2_0(),
						$current);
				}
			)
			otherlv_7='point'
			{
				newLeafNode(otherlv_7, grammarAccess.getPositionAccess().getPointKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPositionAccess().getPointCoordinateParserRuleCall_2_2_0());
					}
					lv_point_8_0=ruleCoordinate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositionRule());
						}
						set(
							$current,
							"point",
							lv_point_8_0,
							"org.xtext.example.sml.Sml.Coordinate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleShape
entryRuleShape returns [String current=null]:
	{ newCompositeNode(grammarAccess.getShapeRule()); }
	iv_ruleShape=ruleShape
	{ $current=$iv_ruleShape.current.getText(); }
	EOF;

// Rule Shape
ruleShape returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Circle'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getShapeAccess().getCircleKeyword_0());
		}
		    |
		kw='Polygon'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getShapeAccess().getPolygonKeyword_1());
		}
		    |
		kw='Triangle'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getShapeAccess().getTriangleKeyword_2());
		}
		    |
		kw='Rectangle'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getShapeAccess().getRectangleKeyword_3());
		}
	)
;

// Entry rule entryRuleArena
entryRuleArena returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArenaRule()); }
	iv_ruleArena=ruleArena
	{ $current=$iv_ruleArena.current; }
	EOF;

// Rule Arena
ruleArena returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='The'
		{
			newLeafNode(otherlv_0, grammarAccess.getArenaAccess().getTheKeyword_0());
		}
		otherlv_1='arena'
		{
			newLeafNode(otherlv_1, grammarAccess.getArenaAccess().getArenaKeyword_1());
		}
		otherlv_2='is'
		{
			newLeafNode(otherlv_2, grammarAccess.getArenaAccess().getIsKeyword_2());
		}
		otherlv_3='a'
		{
			newLeafNode(otherlv_3, grammarAccess.getArenaAccess().getAKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArenaAccess().getSRegionParserRuleCall_4_0());
				}
				lv_s_4_0=ruleRegion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArenaRule());
					}
					set(
						$current,
						"s",
						lv_s_4_0,
						"org.xtext.example.sml.Sml.Region");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColor
entryRuleColor returns [String current=null]:
	{ newCompositeNode(grammarAccess.getColorRule()); }
	iv_ruleColor=ruleColor
	{ $current=$iv_ruleColor.current.getText(); }
	EOF;

// Rule Color
ruleColor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='red'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColorAccess().getRedKeyword_0());
		}
		    |
		kw='yellow'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColorAccess().getYellowKeyword_1());
		}
		    |
		kw='green'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getColorAccess().getGreenKeyword_2());
		}
	)
;

// Entry rule entryRuleRegion
entryRuleRegion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegionRule()); }
	iv_ruleRegion=ruleRegion
	{ $current=$iv_ruleRegion.current; }
	EOF;

// Rule Region
ruleRegion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRegionAccess().getColorsColorParserRuleCall_0_0());
				}
				lv_colors_0_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegionRule());
					}
					set(
						$current,
						"colors",
						lv_colors_0_0,
						"org.xtext.example.sml.Sml.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRegionAccess().getShapeShapeParserRuleCall_1_0());
				}
				lv_shape_1_0=ruleShape
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegionRule());
					}
					set(
						$current,
						"shape",
						lv_shape_1_0,
						"org.xtext.example.sml.Sml.Shape");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getRegionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='with'
			{
				newLeafNode(otherlv_3, grammarAccess.getRegionAccess().getWithKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRegionAccess().getReferencepointPositionParserRuleCall_3_1_0());
					}
					lv_referencepoint_4_0=rulePosition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegionRule());
						}
						set(
							$current,
							"referencepoint",
							lv_referencepoint_4_0,
							"org.xtext.example.sml.Sml.Position");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='and'
			{
				newLeafNode(otherlv_5, grammarAccess.getRegionAccess().getAndKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRegionAccess().getDimensionsDimensionParserRuleCall_4_1_0());
					}
					lv_dimensions_6_0=ruleDimension
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegionRule());
						}
						set(
							$current,
							"dimensions",
							lv_dimensions_6_0,
							"org.xtext.example.sml.Sml.Dimension");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleDimension
entryRuleDimension returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDimensionRule()); }
	iv_ruleDimension=ruleDimension
	{ $current=$iv_ruleDimension.current; }
	EOF;

// Rule Dimension
ruleDimension returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDimensionAccess().getCircleDParserRuleCall_0());
		}
		this_CircleD_0=ruleCircleD
		{
			$current = $this_CircleD_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDimensionAccess().getRectangleDParserRuleCall_1());
		}
		this_RectangleD_1=ruleRectangleD
		{
			$current = $this_RectangleD_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCircleD
entryRuleCircleD returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCircleDRule()); }
	iv_ruleCircleD=ruleCircleD
	{ $current=$iv_ruleCircleD.current; }
	EOF;

// Rule CircleD
ruleCircleD returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='radius'
		{
			newLeafNode(otherlv_0, grammarAccess.getCircleDAccess().getRadiusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCircleDAccess().getRDoubleParserRuleCall_1_0());
				}
				lv_r_1_0=ruleDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCircleDRule());
					}
					set(
						$current,
						"r",
						lv_r_1_0,
						"org.xtext.example.sml.Sml.Double");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRectangleD
entryRuleRectangleD returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRectangleDRule()); }
	iv_ruleRectangleD=ruleRectangleD
	{ $current=$iv_ruleRectangleD.current; }
	EOF;

// Rule RectangleD
ruleRectangleD returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='length'
		{
			newLeafNode(otherlv_0, grammarAccess.getRectangleDAccess().getLengthKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRectangleDAccess().getLDoubleParserRuleCall_1_0());
				}
				lv_l_1_0=ruleDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRectangleDRule());
					}
					set(
						$current,
						"l",
						lv_l_1_0,
						"org.xtext.example.sml.Sml.Double");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=',width'
		{
			newLeafNode(otherlv_2, grammarAccess.getRectangleDAccess().getWidthKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRectangleDAccess().getWDoubleParserRuleCall_3_0());
				}
				lv_w_3_0=ruleDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRectangleDRule());
					}
					set(
						$current,
						"w",
						lv_w_3_0,
						"org.xtext.example.sml.Sml.Double");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='and'
		{
			newLeafNode(otherlv_4, grammarAccess.getRectangleDAccess().getAndKeyword_4());
		}
		otherlv_5='height'
		{
			newLeafNode(otherlv_5, grammarAccess.getRectangleDAccess().getHeightKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRectangleDAccess().getHDoubleParserRuleCall_6_0());
				}
				lv_h_6_0=ruleDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRectangleDRule());
					}
					set(
						$current,
						"h",
						lv_h_6_0,
						"org.xtext.example.sml.Sml.Double");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCoordinate
entryRuleCoordinate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoordinateRule()); }
	iv_ruleCoordinate=ruleCoordinate
	{ $current=$iv_ruleCoordinate.current; }
	EOF;

// Rule Coordinate
ruleCoordinate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCoordinateAccess().getXDoubleParserRuleCall_0_0());
				}
				lv_x_0_0=ruleDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCoordinateRule());
					}
					set(
						$current,
						"x",
						lv_x_0_0,
						"org.xtext.example.sml.Sml.Double");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCoordinateAccess().getYDoubleParserRuleCall_1_0());
				}
				lv_y_1_0=ruleDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCoordinateRule());
					}
					set(
						$current,
						"y",
						lv_y_1_0,
						"org.xtext.example.sml.Sml.Double");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDoubleRule()); }
	iv_ruleDouble=ruleDouble
	{ $current=$iv_ruleDouble.current.getText(); }
	EOF;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRangeAccess().getUpperboundParserRuleCall_0());
		}
		this_Upperbound_0=ruleUpperbound
		{
			$current = $this_Upperbound_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRangeAccess().getLowerboundParserRuleCall_1());
		}
		this_Lowerbound_1=ruleLowerbound
		{
			$current = $this_Lowerbound_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRangeAccess().getIntervalParserRuleCall_2());
		}
		this_Interval_2=ruleInterval
		{
			$current = $this_Interval_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRangeAccess().getLowerorEqualboundParserRuleCall_3());
		}
		this_LowerorEqualbound_3=ruleLowerorEqualbound
		{
			$current = $this_LowerorEqualbound_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRangeAccess().getUpperorEqualboundParserRuleCall_4());
		}
		this_UpperorEqualbound_4=ruleUpperorEqualbound
		{
			$current = $this_UpperorEqualbound_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRangeAccess().getConstantSizeParserRuleCall_5());
		}
		this_ConstantSize_5=ruleConstantSize
		{
			$current = $this_ConstantSize_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConstantSize
entryRuleConstantSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantSizeRule()); }
	iv_ruleConstantSize=ruleConstantSize
	{ $current=$iv_ruleConstantSize.current; }
	EOF;

// Rule ConstantSize
ruleConstantSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_n_0_0=RULE_INT
			{
				newLeafNode(lv_n_0_0, grammarAccess.getConstantSizeAccess().getNINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getConstantSizeRule());
				}
				setWithLastConsumed(
					$current,
					"n",
					lv_n_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleLowerbound
entryRuleLowerbound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLowerboundRule()); }
	iv_ruleLowerbound=ruleLowerbound
	{ $current=$iv_ruleLowerbound.current; }
	EOF;

// Rule Lowerbound
ruleLowerbound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='less'
		{
			newLeafNode(otherlv_0, grammarAccess.getLowerboundAccess().getLessKeyword_0());
		}
		otherlv_1='than'
		{
			newLeafNode(otherlv_1, grammarAccess.getLowerboundAccess().getThanKeyword_1());
		}
		(
			(
				lv_n_2_0=RULE_INT
				{
					newLeafNode(lv_n_2_0, grammarAccess.getLowerboundAccess().getNINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLowerboundRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleLowerorEqualbound
entryRuleLowerorEqualbound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLowerorEqualboundRule()); }
	iv_ruleLowerorEqualbound=ruleLowerorEqualbound
	{ $current=$iv_ruleLowerorEqualbound.current; }
	EOF;

// Rule LowerorEqualbound
ruleLowerorEqualbound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='less'
		{
			newLeafNode(otherlv_0, grammarAccess.getLowerorEqualboundAccess().getLessKeyword_0());
		}
		otherlv_1='or'
		{
			newLeafNode(otherlv_1, grammarAccess.getLowerorEqualboundAccess().getOrKeyword_1());
		}
		otherlv_2='equal'
		{
			newLeafNode(otherlv_2, grammarAccess.getLowerorEqualboundAccess().getEqualKeyword_2());
		}
		otherlv_3='than'
		{
			newLeafNode(otherlv_3, grammarAccess.getLowerorEqualboundAccess().getThanKeyword_3());
		}
		(
			(
				lv_n_4_0=RULE_INT
				{
					newLeafNode(lv_n_4_0, grammarAccess.getLowerorEqualboundAccess().getNINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLowerorEqualboundRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleUpperbound
entryRuleUpperbound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpperboundRule()); }
	iv_ruleUpperbound=ruleUpperbound
	{ $current=$iv_ruleUpperbound.current; }
	EOF;

// Rule Upperbound
ruleUpperbound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='more'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpperboundAccess().getMoreKeyword_0());
		}
		otherlv_1='than'
		{
			newLeafNode(otherlv_1, grammarAccess.getUpperboundAccess().getThanKeyword_1());
		}
		(
			(
				lv_n_2_0=RULE_INT
				{
					newLeafNode(lv_n_2_0, grammarAccess.getUpperboundAccess().getNINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUpperboundRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleUpperorEqualbound
entryRuleUpperorEqualbound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpperorEqualboundRule()); }
	iv_ruleUpperorEqualbound=ruleUpperorEqualbound
	{ $current=$iv_ruleUpperorEqualbound.current; }
	EOF;

// Rule UpperorEqualbound
ruleUpperorEqualbound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='more'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpperorEqualboundAccess().getMoreKeyword_0());
		}
		otherlv_1='or'
		{
			newLeafNode(otherlv_1, grammarAccess.getUpperorEqualboundAccess().getOrKeyword_1());
		}
		otherlv_2='equal'
		{
			newLeafNode(otherlv_2, grammarAccess.getUpperorEqualboundAccess().getEqualKeyword_2());
		}
		otherlv_3='than'
		{
			newLeafNode(otherlv_3, grammarAccess.getUpperorEqualboundAccess().getThanKeyword_3());
		}
		(
			(
				lv_n_4_0=RULE_INT
				{
					newLeafNode(lv_n_4_0, grammarAccess.getUpperorEqualboundAccess().getNINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUpperorEqualboundRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	iv_ruleInterval=ruleInterval
	{ $current=$iv_ruleInterval.current; }
	EOF;

// Rule Interval
ruleInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='between'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntervalAccess().getBetweenKeyword_0());
		}
		(
			(
				lv_m_1_0=RULE_INT
				{
					newLeafNode(lv_m_1_0, grammarAccess.getIntervalAccess().getMINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntervalRule());
					}
					setWithLastConsumed(
						$current,
						"m",
						lv_m_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='and'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntervalAccess().getAndKeyword_2());
		}
		(
			(
				lv_n_3_0=RULE_INT
				{
					newLeafNode(lv_n_3_0, grammarAccess.getIntervalAccess().getNINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntervalRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IntLiteral'
		{
			newLeafNode(otherlv_0, grammarAccess.getLiteralAccess().getIntLiteralKeyword_0());
		}
		    |
		otherlv_1='RealLiteral'
		{
			newLeafNode(otherlv_1, grammarAccess.getLiteralAccess().getRealLiteralKeyword_1());
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBoolLiteralParserRuleCall_2());
		}
		this_BoolLiteral_2=ruleBoolLiteral
		{
			$current = $this_BoolLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolLiteralRule()); }
	iv_ruleBoolLiteral=ruleBoolLiteral
	{ $current=$iv_ruleBoolLiteral.current; }
	EOF;

// Rule BoolLiteral
ruleBoolLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1='true'
				{
					newLeafNode(lv_value_0_1, grammarAccess.getBoolLiteralAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolLiteralRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_1, null);
				}
				    |
				lv_value_0_2='false'
				{
					newLeafNode(lv_value_0_2, grammarAccess.getBoolLiteralAccess().getValueFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolLiteralRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_2, null);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
