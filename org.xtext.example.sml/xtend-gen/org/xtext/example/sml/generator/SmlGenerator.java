/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.sml.generator;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.sml.sml.Arena;
import org.xtext.example.sml.sml.ConstantSize;
import org.xtext.example.sml.sml.Coordinate2D;
import org.xtext.example.sml.sml.Coordinate3D;
import org.xtext.example.sml.sml.DefinitionOne;
import org.xtext.example.sml.sml.Dimension;
import org.xtext.example.sml.sml.Dimension1;
import org.xtext.example.sml.sml.Dimension2;
import org.xtext.example.sml.sml.Dimension3;
import org.xtext.example.sml.sml.ElementDescription;
import org.xtext.example.sml.sml.Environment;
import org.xtext.example.sml.sml.EnvironmentElement;
import org.xtext.example.sml.sml.EnvironmentElements;
import org.xtext.example.sml.sml.Interval;
import org.xtext.example.sml.sml.Light;
import org.xtext.example.sml.sml.Model;
import org.xtext.example.sml.sml.Obstacle;
import org.xtext.example.sml.sml.Position;
import org.xtext.example.sml.sml.Range;
import org.xtext.example.sml.sml.RegionDefinition;
import org.xtext.example.sml.sml.Swarmconf;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SmlGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model model = ((Model) _head);
    EObject _head_1 = IterableExtensions.<EObject>head(resource.getContents());
    Model model1 = ((Model) _head_1);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("        ");
    _builder.append("<?xml version=\"1.0\" ?>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("<argos-configuration>");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<!-- ************* -->");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<!-- * Framework * -->");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<!-- ************* -->");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<!--AGGREGATION ON ONE  SPOT-->");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<framework>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<experiment length=\"");
    CharSequence _compile = this.compile(model.getMs().getMt().getT());
    _builder.append(_compile, "         ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("                     ");
    _builder.append("ticks_per_second=\"10\" random_seed=\"0\"/>");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("</framework>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- ****************** -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- * Loop functions * -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- ****************** -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<loop_functions library=\"PATH_TO_LIB/libchocolate_mission1_loopfunc.dylib\" label=\"chocolate_mission1_loop_functions\">");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<params dist_radius=\"1.2\" number_robots=\"");
    String _n = model.getSw().getX().getN();
    _builder.append(_n, "          ");
    _builder.append("\" m_min_robots=\"");
    CharSequence _compile_1 = this.compile(model.getSw().getX());
    _builder.append(_compile_1, "          ");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("</loop_functions>");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- *************** -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- * Controllers * -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- *************** -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<controllers>");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("<!-- TRANSMITTER -->");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("<automode_controller id=\"automode\"");
    _builder.newLine();
    _builder.append("                               ");
    _builder.append("library=\"/Users/darko/Documents/GitHub/Automode/AutoMoDe-private/build/src/libautomode.dylib\">");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("<actuators>");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("<epuck_wheels implementation=\"default\" noise_std_dev=\"0.05\"/>");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("<epuck_rgb_leds implementation=\"default\" medium=\"leds\"/>");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("<epuck_range_and_bearing implementation=\"medium\" medium=\"rab\" data_size=\"4\" range=\"0.7\"/>");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("</actuators>");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("<sensors>");
    _builder.newLine();
    _builder.append("       \t\t    ");
    _builder.append("<epuck_proximity implementation=\"default\" show_rays=\"false\" noise_level=\"0.05\" calibrated=\"true\"/>");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("<epuck_range_and_bearing implementation=\"medium\" medium=\"rab\" data_size=\"4\" nois_std_deviation=\"1.5\" loss_probability=\"0.85\" calibrated=\"true\"/>");
    _builder.newLine();
    _builder.append("       \t\t    ");
    _builder.append("<epuck_light implementation=\"default\" show_rays=\"true\" noise_level=\"0.05\" calibrated=\"true\"/>");
    _builder.newLine();
    _builder.append("       \t\t    ");
    _builder.append("<epuck_ground implementation=\"rot_z_only\" noise_level=\"0.05\" calibrated=\"true\"/>");
    _builder.newLine();
    _builder.append("       \t\t    ");
    _builder.append("<epuck_omnidirectional_camera implementation=\"rot_z_only\" medium=\"leds\" show_rays=\"false\"/>");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("</sensors>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!--  <params fsm-config=\"--nstates 1 --s0 1\" />  -->");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<params");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("fsm-config=\"--nstates 2 --s0 4 --att0 5 --n0 1 --n0x0 0 --c0x0 0 --p0x0 ");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("1.0 --s1 1 --n1 1 --n1x0 0 --c1x0 5 --p1x0 0.25\"/>");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("</automode_controller>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("</controllers>");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- ********* -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- * Arena * -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- ********* -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<arena size=\"10, 10, 1\" center=\"0,0,0\">");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<!-- Change the floor here -->");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<floor id=\"floor\" source=\"loop_functions\" pixels_per_meter=\"300\"/>");
    _builder.newLine();
    _builder.append("      ");
    {
      Arena _arenas = model.getArenas();
      boolean _tripleNotEquals = (_arenas != null);
      if (_tripleNotEquals) {
        CharSequence _compile_2 = this.compile(model.getEnv());
        _builder.append(_compile_2, "      ");
        _builder.append(" ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    {
      Arena _arenas_1 = model.getArenas();
      boolean _tripleNotEquals_1 = (_arenas_1 != null);
      if (_tripleNotEquals_1) {
        CharSequence _compile_3 = this.compile(model.getSw());
        _builder.append(_compile_3, "      ");
        _builder.append(" ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("</arena>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("<!-- ******************* -->");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("<!-- * Physics engines * -->");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("<!-- ******************* -->");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("<physics_engines>");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("<dynamics2d id=\"dyn2d\" />");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("</physics_engines>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- ********* -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- * Media * -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- ********* -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<media>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<led id=\"leds\" grid_size=\"1,1,1\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<range_and_bearing id=\"ircom\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<range_and_bearing id=\"rab\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</media>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- ***************** -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- * Visualization * -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- ***************** -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<visualization>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<qt-opengl>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</qt-opengl>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</visualization>");
    _builder.newLine();
    _builder.append("</argos-configuration>");
    _builder.newLine();
    fsa.generateFile("setup.xml", _builder);
  }
  
  public CharSequence compile(final Environment en) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EnvironmentElements> _environment = en.getEnvironment();
      for(final EnvironmentElements e : _environment) {
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
        {
          if ((e instanceof ElementDescription)) {
            CharSequence _compile = this.compile(((ElementDescription) e));
            _builder.append(_compile);
            _builder.newLineIfNotEmpty();
          } else {
            if ((e instanceof EnvironmentElement)) {
              CharSequence _compile_1 = this.compile(((EnvironmentElement) e));
              _builder.append(_compile_1);
            }
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t       \t        ");
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ElementDescription ed) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("<distribute>");
    _builder.newLine();
    _builder.append("\t             ");
    _builder.append("<position method=\"");
    String _dis = ed.getR().getDis();
    _builder.append(_dis, "\t             ");
    _builder.append("\" ");
    {
      String _dis_1 = ed.getR().getDis();
      boolean _equals = Objects.equal(_dis_1, "uniform");
      if (_equals) {
        _builder.append(" min=\"0,0,0\" max=\"");
        _builder.newLineIfNotEmpty();
        _builder.append("\t             ");
        _builder.newLine();
        _builder.append("\t             ");
        {
          RegionDefinition _region = ed.getR().getK().getRegion();
          if ((_region instanceof DefinitionOne)) {
            RegionDefinition _region_1 = ed.getR().getK().getRegion();
            CharSequence _compile = this.compile(((DefinitionOne) _region_1), true);
            _builder.append(_compile, "\t             ");
            _builder.append(" ");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t           ");
        _builder.newLine();
        _builder.append("\t             ");
        _builder.newLine();
        _builder.append("\t             ");
        _builder.append("\" />");
      } else {
        String _dis_2 = ed.getR().getDis();
        boolean _equals_1 = Objects.equal(_dis_2, "Gaussian");
        if (_equals_1) {
          _builder.append(" mean=\"0,0,0\" std_dev=\"360,0,0\" />");
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t             ");
    _builder.append("<orientation method=\"");
    String _dis_3 = ed.getR().getDis();
    _builder.append(_dis_3, "\t             ");
    _builder.append("\" ");
    {
      String _dis_4 = ed.getR().getDis();
      boolean _equals_2 = Objects.equal(_dis_4, "uniform");
      if (_equals_2) {
        _builder.append(" min=\"0,0,0\" max=\"");
        CharSequence _compile_1 = this.compile(ed.getR().getK());
        _builder.append(_compile_1, "\t             ");
        _builder.append("\" />");
      } else {
        String _dis_5 = ed.getR().getDis();
        boolean _equals_3 = Objects.equal(_dis_5, "Gaussian");
        if (_equals_3) {
          _builder.append(" mean=\"0,0,0\" std_dev=\"360,0,0\" />");
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t             ");
    _builder.append("<entity quantity=\"");
    String _n = ed.getX().getN();
    _builder.append(_n, "\t             ");
    _builder.append("\" max_trials=\"100\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t                 ");
    _builder.append("<box   id=\"b");
    double _random = Math.random();
    double _multiply = (_random * 100);
    _builder.append(_multiply, "\t                 ");
    _builder.append("\" size=\"");
    {
      RegionDefinition _region_2 = ed.getR().getK().getRegion();
      if ((_region_2 instanceof DefinitionOne)) {
        RegionDefinition _region_3 = ed.getR().getK().getRegion();
        CharSequence _compile_2 = this.compile(((DefinitionOne) _region_3), false);
        _builder.append(_compile_2, "\t                 ");
        _builder.append("   ");
      }
    }
    _builder.append("\" movable=\"");
    String _string = Boolean.valueOf(this.check(ed.getObj().getOb())).toString();
    _builder.append(_string, "\t                 ");
    _builder.append("\" />");
    _builder.newLineIfNotEmpty();
    _builder.append("\t            ");
    _builder.append("</entity>");
    _builder.newLine();
    _builder.append("\t           ");
    _builder.append("</distribute>  ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EnvironmentElement en) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((en instanceof Obstacle)) {
        _builder.newLineIfNotEmpty();
        Object _compile = this.compile(((Obstacle) en));
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        if ((en instanceof org.xtext.example.sml.sml.Object)) {
          Object _compile_1 = this.compile(((org.xtext.example.sml.sml.Object) en));
          _builder.append(_compile_1);
          _builder.newLineIfNotEmpty();
        } else {
          if ((en instanceof Light)) {
            CharSequence _compile_2 = this.compile(((Light) en));
            _builder.append(_compile_2);
            _builder.newLineIfNotEmpty();
            _builder.append("\t       \t        ");
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final DefinitionOne defone, final boolean referencepoint) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (referencepoint) {
        Position _referencepoint = defone.getReferencepoint();
        _builder.append(_referencepoint);
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t ");
      } else {
        Dimension _dimensions = defone.getDimensions();
        _builder.append(_dimensions);
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Arena A) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((A != null)) {
        _builder.append("<arena size= center=2.0\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t          ");
        _builder.append("</arena>");
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Range R) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((R instanceof ConstantSize)) {
        String _n = ((ConstantSize)R).getN();
        _builder.append(_n);
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t\t\t  ");
      } else {
        if ((R instanceof Interval)) {
          String _m = ((Interval)R).getM();
          _builder.append(_m);
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Light l) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<light id=\"light");
    double _random = Math.random();
    double _multiply = (_random * 100);
    _builder.append(_multiply);
    _builder.append("\" position=\"");
    CharSequence _compile = this.compile(l.getP());
    _builder.append(_compile);
    _builder.append("\" orientation=\"0,0,0\" color=\"");
    String _c = l.getC();
    _builder.append(_c);
    _builder.append("\" intensity=\"0.0\" medium=\"leds\"/>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Position pt) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _point = pt.getPoint();
      if ((_point instanceof Coordinate2D)) {
        _builder.append("  ");
        EObject _point_1 = pt.getPoint();
        CharSequence _compile = this.compile(((Coordinate2D) _point_1));
        _builder.append(_compile);
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t\t\t\t\t\t\t");
      } else {
        EObject _point_2 = pt.getPoint();
        if ((_point_2 instanceof Coordinate3D)) {
          _builder.append(" ");
          EObject _point_3 = pt.getPoint();
          CharSequence _compile_1 = this.compile(((Coordinate3D) _point_3));
          _builder.append(_compile_1);
          _builder.append(" ");
        }
      }
    }
    return _builder;
  }
  
  public boolean check(final String en) {
    boolean _contains = en.contains("objects");
    if (_contains) {
      return true;
    } else {
      boolean _contains_1 = en.contains("obstacles");
      if (_contains_1) {
        return false;
      }
    }
    return false;
  }
  
  public CharSequence compile(final Dimension1 dm1) {
    StringConcatenation _builder = new StringConcatenation();
    String _r = dm1.getR();
    _builder.append(_r);
    _builder.append(" ");
    {
      String _h = dm1.getH();
      boolean _tripleNotEquals = (_h != null);
      if (_tripleNotEquals) {
        _builder.append(",");
        String _h_1 = dm1.getH();
        _builder.append(_h_1);
        _builder.append(" ");
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Dimension2 dm2) {
    StringConcatenation _builder = new StringConcatenation();
    String _l = dm2.getL();
    _builder.append(_l);
    _builder.append(",");
    String _w = dm2.getW();
    _builder.append(_w);
    _builder.append(",");
    String _h = dm2.getH();
    _builder.append(_h);
    return _builder;
  }
  
  public CharSequence compile(final Dimension3 dm3) {
    StringConcatenation _builder = new StringConcatenation();
    String _s = dm3.getS();
    _builder.append(_s);
    return _builder;
  }
  
  public CharSequence compile(final Swarmconf sw) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("<distribute>");
    _builder.newLine();
    _builder.append("\t             ");
    _builder.append("<position method=\"");
    String _dis = sw.getPr().getDis();
    _builder.append(_dis, "\t             ");
    _builder.append("\" ");
    {
      String _dis_1 = sw.getPr().getDis();
      boolean _equals = Objects.equal(_dis_1, "Uniform");
      if (_equals) {
        _builder.append(" min=\"0,0,0\" max=\"");
        CharSequence _compile = this.compile(sw.getPr().getK());
        _builder.append(_compile, "\t             ");
        _builder.append("\" />");
      } else {
        String _dis_2 = sw.getPr().getDis();
        boolean _equals_1 = Objects.equal(_dis_2, "gaussian");
        if (_equals_1) {
          _builder.append(" mean=\"0,0,0\" std_dev=\"360,0,0\" />");
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t             ");
    _builder.append("<orientation method=\"");
    String _dis_3 = sw.getPr().getDis();
    _builder.append(_dis_3, "\t             ");
    _builder.append("\" ");
    {
      String _dis_4 = sw.getPr().getDis();
      boolean _equals_2 = Objects.equal(_dis_4, "Uniform");
      if (_equals_2) {
        _builder.append(" min=\"0,0,0\" max=\"");
        CharSequence _compile_1 = this.compile(sw.getPr().getK());
        _builder.append(_compile_1, "\t             ");
        _builder.append("\" />");
      } else {
        String _dis_5 = sw.getPr().getDis();
        boolean _equals_3 = Objects.equal(_dis_5, "gaussian");
        if (_equals_3) {
          _builder.append(" mean=\"0,0,0\" std_dev=\"360,0,0\" />");
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t             ");
    _builder.append("<entity quantity=\"");
    String _n = sw.getX().getN();
    _builder.append(_n, "\t             ");
    _builder.append("\" max_trials=\"100\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t               ");
    _builder.append("<");
    String _r = sw.getR();
    _builder.append(_r, "\t               ");
    _builder.append(" id=\"");
    String _string = sw.getR().toString();
    _builder.append(_string, "\t               ");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t                 ");
    _builder.append("<controller ");
    {
      String _r_1 = sw.getR();
      boolean _equals_4 = Objects.equal(_r_1, "foot-boot");
      if (_equals_4) {
        _builder.append(" config=\"fdc\"");
      } else {
        String _r_2 = sw.getR();
        boolean _equals_5 = Objects.equal(_r_2, "e-puck");
        if (_equals_5) {
          _builder.append(" config=\"automode\"");
        }
      }
    }
    _builder.append(" />");
    _builder.newLineIfNotEmpty();
    _builder.append("\t               ");
    _builder.append("</");
    String _r_3 = sw.getR();
    _builder.append(_r_3, "\t               ");
    _builder.append(" >");
    _builder.newLineIfNotEmpty();
    _builder.append("\t            ");
    _builder.append("</entity>");
    _builder.newLine();
    _builder.append("\t           ");
    _builder.append("</distribute>  ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Coordinate2D pt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    String _x = pt.getX();
    _builder.append(_x, " ");
    _builder.append(",");
    String _y = pt.getY();
    _builder.append(_y, " ");
    return _builder;
  }
  
  public CharSequence compile(final Coordinate3D pt) {
    StringConcatenation _builder = new StringConcatenation();
    String _x = pt.getX();
    _builder.append(_x);
    _builder.append(",");
    String _y = pt.getY();
    _builder.append(_y);
    _builder.append(",");
    String _z = pt.getZ();
    _builder.append(_z);
    return _builder;
  }
}
