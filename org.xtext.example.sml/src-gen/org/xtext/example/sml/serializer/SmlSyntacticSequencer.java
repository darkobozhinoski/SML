/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.sml.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.sml.services.SmlGrammarAccess;

@SuppressWarnings("all")
public class SmlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SmlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Environment___TheKeyword_0_0_ArenaKeyword_0_1_ContainsKeyword_0_2_TheKeyword_0_3_FollowingKeyword_0_4_ElementsKeyword_0_5_ColonKeyword_0_6__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SmlGrammarAccess) access;
		match_Environment___TheKeyword_0_0_ArenaKeyword_0_1_ContainsKeyword_0_2_TheKeyword_0_3_FollowingKeyword_0_4_ElementsKeyword_0_5_ColonKeyword_0_6__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getTheKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getArenaKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getContainsKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getTheKeyword_0_3()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getFollowingKeyword_0_4()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getElementsKeyword_0_5()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getColonKeyword_0_6()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Environment___TheKeyword_0_0_ArenaKeyword_0_1_ContainsKeyword_0_2_TheKeyword_0_3_FollowingKeyword_0_4_ElementsKeyword_0_5_ColonKeyword_0_6__q.equals(syntax))
				emit_Environment___TheKeyword_0_0_ArenaKeyword_0_1_ContainsKeyword_0_2_TheKeyword_0_3_FollowingKeyword_0_4_ElementsKeyword_0_5_ColonKeyword_0_6__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (
	  *         'The' 
	  *         'arena' 
	  *         'contains' 
	  *         'the' 
	  *         'following' 
	  *         'elements' 
	  *         ':'
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) environment+=EnvironmentElements
	 */
	protected void emit_Environment___TheKeyword_0_0_ArenaKeyword_0_1_ContainsKeyword_0_2_TheKeyword_0_3_FollowingKeyword_0_4_ElementsKeyword_0_5_ColonKeyword_0_6__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
